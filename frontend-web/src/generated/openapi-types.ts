/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/agents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read Agents */
        get: operations["read_agents_api_agents_get"];
        put?: never;
        /** Create Agent */
        post: operations["create_agent_api_agents_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/agents/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read Agents */
        get: operations["read_agents_api_agents__get"];
        put?: never;
        /** Create Agent */
        post: operations["create_agent_api_agents__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/agents/{agent_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read Agent */
        get: operations["read_agent_api_agents__agent_id__get"];
        /** Update Agent */
        put: operations["update_agent_api_agents__agent_id__put"];
        post?: never;
        /** Delete Agent */
        delete: operations["delete_agent_api_agents__agent_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/agents/{agent_id}/details": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read Agent Details */
        get: operations["read_agent_details_api_agents__agent_id__details_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/agents/{agent_id}/messages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read Agent Messages */
        get: operations["read_agent_messages_api_agents__agent_id__messages_get"];
        put?: never;
        /** Create Agent Message */
        post: operations["create_agent_message_api_agents__agent_id__messages_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/agents/{agent_id}/task": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Run Agent Task */
        post: operations["run_agent_task_api_agents__agent_id__task_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/agents/{agent_id}/mcp-servers/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Mcp Servers
         * @description List all MCP servers configured for an agent.
         */
        get: operations["list_mcp_servers_api_agents__agent_id__mcp_servers__get"];
        put?: never;
        /**
         * Add Mcp Server
         * @description Add an MCP server to an agent.
         */
        post: operations["add_mcp_server_api_agents__agent_id__mcp_servers__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/agents/{agent_id}/mcp-servers/{server_name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove Mcp Server
         * @description Remove an MCP server from an agent.
         */
        delete: operations["remove_mcp_server_api_agents__agent_id__mcp_servers__server_name__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/agents/{agent_id}/mcp-servers/test": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Test Mcp Connection
         * @description Test connection to an MCP server without saving it.
         */
        post: operations["test_mcp_connection_api_agents__agent_id__mcp_servers_test_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/agents/{agent_id}/mcp-servers/available-tools": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Available Tools
         * @description Get all available tools for an agent (built-in + MCP).
         */
        get: operations["get_available_tools_api_agents__agent_id__mcp_servers_available_tools_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/threads": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Read Threads
         * @description Get all threads, optionally filtered by agent_id
         */
        get: operations["read_threads_api_threads_get"];
        put?: never;
        /**
         * Create Thread
         * @description Create a new thread
         */
        post: operations["create_thread_api_threads_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/threads/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Read Threads
         * @description Get all threads, optionally filtered by agent_id
         */
        get: operations["read_threads_api_threads__get"];
        put?: never;
        /**
         * Create Thread
         * @description Create a new thread
         */
        post: operations["create_thread_api_threads__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/threads/{thread_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Read Thread
         * @description Get a specific thread by ID
         */
        get: operations["read_thread_api_threads__thread_id__get"];
        /**
         * Update Thread
         * @description Update a thread
         */
        put: operations["update_thread_api_threads__thread_id__put"];
        post?: never;
        /**
         * Delete Thread
         * @description Delete a thread
         */
        delete: operations["delete_thread_api_threads__thread_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/threads/{thread_id}/messages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Read Thread Messages
         * @description Get all messages for a thread
         */
        get: operations["read_thread_messages_api_threads__thread_id__messages_get"];
        put?: never;
        /**
         * Create Thread Message
         * @description Create a new message in a thread
         */
        post: operations["create_thread_message_api_threads__thread_id__messages_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/threads/{thread_id}/run": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Run Thread
         * @description Process any unprocessed messages in the thread and stream back the result.
         */
        post: operations["run_thread_api_threads__thread_id__run_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/models/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Models
         * @description Return available models.
         */
        get: operations["get_models_api_models__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/reset-database": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reset Database
         * @description Reset the database by dropping all tables and recreating them. For development only.
         */
        post: operations["reset_database_api_admin_reset_database_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/email/webhook/google": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Gmail Webhook
         * @description Handle Gmail *watch* callbacks.
         *
         *     The implementation is an **MVP**: every callback simply triggers all
         *     *gmail* email-type triggers.  Later versions will match the *resourceId*
         *     to a specific user and run the Gmail *history* API to fetch only the new
         *     messages.
         */
        post: operations["gmail_webhook_api_email_webhook_google_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/triggers/{trigger_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete Trigger
         * @description Delete a trigger.
         *
         *     Special handling for *email* provider **gmail**:
         *
         *     • Attempts to call Gmail *stop* endpoint so push notifications are
         *       turned off immediately on user’s mailbox.  The call is best effort –
         *       network/auth failures are logged but do not abort the deletion.
         */
        delete: operations["delete_trigger_api_triggers__trigger_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/triggers/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Triggers
         * @description List all triggers, optionally filtered by agent_id.
         */
        get: operations["list_triggers_api_triggers__get"];
        put?: never;
        /**
         * Create Trigger
         * @description Create a new trigger for an agent.
         *
         *     If the trigger is of type *email* and the provider is **gmail** we kick off
         *     an asynchronous helper that ensures a Gmail *watch* is registered.  The
         *     call is awaited so tests (which run inside the same event-loop) can verify
         *     the side-effects synchronously without sprinkling ``asyncio.sleep`` hacks.
         */
        post: operations["create_trigger_api_triggers__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/triggers/{trigger_id}/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Fire Trigger Event
         * @description Webhook endpoint that fires a trigger event.
         *
         *     Security: the caller must sign the request body using HMAC-SHA256.
         *
         *     Signature string to hash:
         *         "{timestamp}.{raw_body}"
         *
         *     where *timestamp* is the same value sent in `X-Zerg-Timestamp` header and
         *     *raw_body* is the exact JSON body (no whitespace changes).  The hex-encoded
         *     digest is provided via `X-Zerg-Signature` header.
         */
        post: operations["fire_trigger_event_api_triggers__trigger_id__events_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/agents/{agent_id}/runs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Agent Runs
         * @description Return latest *limit* runs for the given agent (descending).
         */
        get: operations["list_agent_runs_api_agents__agent_id__runs_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/runs/{run_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Run */
        get: operations["get_run_api_runs__run_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workflows/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Validate Workflow
         * @description Validate workflow canvas data without saving.
         */
        post: operations["validate_workflow_api_workflows_validate_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workflows/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Read Workflows
         * @description Return all workflows owned by current user.
         */
        get: operations["read_workflows_api_workflows__get"];
        put?: never;
        /**
         * Create Workflow
         * @description Create new workflow.
         *     Rate limited to 100 workflows per minute per user.
         */
        post: operations["create_workflow_api_workflows__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workflows/current": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Current Workflow
         * @description Get the user's current working workflow.
         *     Creates a default workflow if none exists.
         */
        get: operations["get_current_workflow_api_workflows_current_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workflows/current/canvas": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update Current Workflow Canvas
         * @description Update the canvas for the user's current workflow.
         *     Creates a default workflow if none exists.
         */
        patch: operations["update_current_workflow_canvas_api_workflows_current_canvas_patch"];
        trace?: never;
    };
    "/api/workflows/{workflow_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete Workflow */
        delete: operations["delete_workflow_api_workflows__workflow_id__delete"];
        options?: never;
        head?: never;
        /** Rename Workflow */
        patch: operations["rename_workflow_api_workflows__workflow_id__patch"];
        trace?: never;
    };
    "/api/workflows/{workflow_id}/layout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Workflow Layout
         * @description Return the stored canvas layout for the workflow or **204** when empty.
         */
        get: operations["get_workflow_layout_api_workflows__workflow_id__layout_get"];
        /**
         * Put Workflow Layout
         * @description Persist the canvas layout for **workflow_id** owned by *current_user*.
         *
         *     The endpoint completely replaces the stored layout – callers should send
         *     the full `nodes` + `viewport` payload (same schema as `/api/graph/layout`).
         */
        put: operations["put_workflow_layout_api_workflows__workflow_id__layout_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workflow-executions/{workflow_id}/reserve": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reserve Workflow Execution
         * @description Reserve an execution ID for a workflow without starting execution.
         *     This allows the frontend to subscribe to WebSocket messages before execution starts.
         */
        post: operations["reserve_workflow_execution_api_workflow_executions__workflow_id__reserve_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workflow-executions/{workflow_id}/start": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Start Workflow Execution
         * @description Start a new execution of a workflow using LangGraph engine.
         *     Uses the original synchronous approach.
         */
        post: operations["start_workflow_execution_api_workflow_executions__workflow_id__start_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workflow-executions/executions/{execution_id}/start": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Start Reserved Execution
         * @description Start a previously reserved execution.
         */
        post: operations["start_reserved_execution_api_workflow_executions_executions__execution_id__start_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workflow-executions/{execution_id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Execution Status
         * @description Get the status of a workflow execution.
         */
        get: operations["get_execution_status_api_workflow_executions__execution_id__status_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workflow-executions/{execution_id}/logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Execution Logs
         * @description Get the logs of a workflow execution.
         */
        get: operations["get_execution_logs_api_workflow_executions__execution_id__logs_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workflow-executions/history/{workflow_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Execution History
         * @description Get the execution history of a workflow.
         */
        get: operations["get_execution_history_api_workflow_executions_history__workflow_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workflow-executions/{execution_id}/export": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Export Execution Data
         * @description Export the data of a workflow execution.
         */
        get: operations["export_execution_data_api_workflow_executions__execution_id__export_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workflow-executions/{execution_id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Cancel Execution
         * @description Mark a running workflow execution as *cancelled*.
         *
         *     The engine cooperatively checks the updated status before starting each
         *     new node and exits early. If the execution already finished the endpoint
         *     returns 409.
         */
        patch: operations["cancel_execution_api_workflow_executions__execution_id__cancel_patch"];
        trace?: never;
    };
    "/api/workflow-executions/{workflow_id}/schedule": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Workflow Schedule
         * @description Get the current schedule for a workflow.
         */
        get: operations["get_workflow_schedule_api_workflow_executions__workflow_id__schedule_get"];
        put?: never;
        /**
         * Schedule Workflow
         * @description Schedule a workflow to run on a cron schedule.
         */
        post: operations["schedule_workflow_api_workflow_executions__workflow_id__schedule_post"];
        /**
         * Unschedule Workflow
         * @description Remove the schedule for a workflow.
         */
        delete: operations["unschedule_workflow_api_workflow_executions__workflow_id__schedule_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workflow-executions/scheduled": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Scheduled Workflows
         * @description List all scheduled workflows for the current user.
         */
        get: operations["list_scheduled_workflows_api_workflow_executions_scheduled_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/google": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Google Sign In
         * @description Exchange a Google ID token for a platform access token.
         *
         *     Expected JSON body: `{ "id_token": "<JWT from Google>" }`.
         */
        post: operations["google_sign_in_api_auth_google_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/google/gmail": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Connect Gmail
         * @description Store *offline* Gmail permissions for the **current** user.
         *
         *     Expected body: ``{ "auth_code": "<code from OAuth consent window>" }``.
         *
         *     The frontend must request the following when launching the consent screen::
         *
         *         scope=https://www.googleapis.com/auth/gmail.readonly
         *         access_type=offline
         *         prompt=consent
         *
         *     The *refresh token* returned by Google is stored on the user row.  The
         *     endpoint returns a simple JSON confirmation so the client knows the
         *     account is connected.
         */
        post: operations["connect_gmail_api_auth_google_gmail_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Read Current User
         * @description Return the authenticated user's profile.
         */
        get: operations["read_current_user_api_users_me_get"];
        /**
         * Update Current User
         * @description Patch the authenticated user's profile (display name, avatar, prefs).
         */
        put: operations["update_current_user_api_users_me_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/me/avatar": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload Current User Avatar
         * @description Handle *multipart/form-data* avatar upload for the authenticated user.
         */
        post: operations["upload_current_user_avatar_api_users_me_avatar_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/templates/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Templates
         * @description List workflow templates. By default shows public templates.
         *     Set my_templates=true to see your own templates (public and private).
         */
        get: operations["list_templates_api_templates__get"];
        put?: never;
        /**
         * Create Template
         * @description Create new workflow template.
         */
        post: operations["create_template_api_templates__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/templates/categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Categories
         * @description Get all available template categories.
         */
        get: operations["list_categories_api_templates_categories_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/templates/{template_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Template
         * @description Get a specific template by ID.
         */
        get: operations["get_template_api_templates__template_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/templates/deploy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Deploy Template
         * @description Deploy a template as a new workflow.
         */
        post: operations["deploy_template_api_templates_deploy_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/graph/layout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Layout
         * @description Return the stored layout for the authenticated user (if any).
         */
        get: operations["get_layout_api_graph_layout_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Patch Layout
         * @description Upsert the authenticated user's canvas layout.
         */
        patch: operations["patch_layout_api_graph_layout_patch"];
        trace?: never;
    };
    "/api/system/info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * System Info
         * @description Return non-sensitive runtime switches used by the SPA at startup.
         */
        get: operations["system_info_api_system_info_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/reset-database": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**  Legacy Reset Database */
        post: operations["_legacy_reset_database_admin_reset_database_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Read Root
         * @description Return a simple message to indicate the API is working.
         */
        get: operations["read_root__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** Agent */
        Agent: {
            /** Name */
            name: string;
            /** System Instructions */
            system_instructions: string;
            /** Task Instructions */
            task_instructions: string;
            /** Model */
            model: string;
            /** Schedule */
            schedule?: string | null;
            /** Config */
            config?: Record<string, never> | null;
            /** Last Error */
            last_error?: string | null;
            /** Allowed Tools */
            allowed_tools?: string[] | null;
            /** Id */
            id: number;
            /** Owner Id */
            owner_id: number;
            owner?: components["schemas"]["UserOut"] | null;
            /** Status */
            status: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
            /**
             * Messages
             * @default []
             */
            messages: components["schemas"]["AgentMessage"][];
            /** Next Run At */
            next_run_at?: string | null;
            /** Last Run At */
            last_run_at?: string | null;
        };
        /** AgentCreate */
        AgentCreate: {
            /** Name */
            name: string;
            /** System Instructions */
            system_instructions: string;
            /** Task Instructions */
            task_instructions: string;
            /** Model */
            model: string;
            /** Schedule */
            schedule?: string | null;
            /** Config */
            config?: Record<string, never> | null;
            /** Last Error */
            last_error?: string | null;
            /** Allowed Tools */
            allowed_tools?: string[] | null;
        };
        /**
         * AgentDetails
         * @description Envelope object returned by the Agent *details* REST endpoint.
         *
         *     In Phase 1 we only populate the mandatory ``agent`` field.  The optional
         *     ``threads``, ``runs`` and ``stats`` keys are included so that the response
         *     shape is forwards-compatible with the richer payloads planned for future
         *     phases (see *agent_debug_modal_design.md*).
         */
        AgentDetails: {
            agent: components["schemas"]["Agent"];
            /** Threads */
            threads?: components["schemas"]["Thread"][] | null;
            /** Runs */
            runs?: unknown[] | null;
            /** Stats */
            stats?: Record<string, never> | null;
        };
        /** AgentMessage */
        AgentMessage: {
            /** Id */
            id: number;
            /** Agent Id */
            agent_id: number;
            /** Role */
            role: string;
            /** Content */
            content: string;
            /**
             * Timestamp
             * Format: date-time
             */
            timestamp: string;
        };
        /** AgentRunOut */
        AgentRunOut: {
            /** Id */
            id: number;
            /** Agent Id */
            agent_id: number;
            /** Thread Id */
            thread_id: number;
            status: components["schemas"]["RunStatus"];
            trigger: components["schemas"]["RunTrigger"];
            /** Started At */
            started_at?: string | null;
            /** Finished At */
            finished_at?: string | null;
            /** Duration Ms */
            duration_ms?: number | null;
            /** Total Tokens */
            total_tokens?: number | null;
            /** Total Cost Usd */
            total_cost_usd?: number | null;
            /** Error */
            error?: string | null;
        };
        /**
         * AgentStatus
         * @enum {string}
         */
        AgentStatus: "idle" | "running" | "error" | "processing";
        /** AgentUpdate */
        AgentUpdate: {
            /** Name */
            name?: string | null;
            /** System Instructions */
            system_instructions?: string | null;
            /** Task Instructions */
            task_instructions?: string | null;
            /** Model */
            model?: string | null;
            status?: components["schemas"]["AgentStatus"] | null;
            /** Schedule */
            schedule?: string | null;
            /** Config */
            config?: Record<string, never> | null;
            /** Last Error */
            last_error?: string | null;
            /** Allowed Tools */
            allowed_tools?: string[] | null;
        };
        /** Body_upload_current_user_avatar_api_users_me_avatar_post */
        Body_upload_current_user_avatar_api_users_me_avatar_post: {
            /**
             * File
             * Format: binary
             * @description Avatar image file (PNG/JPEG/WebP ≤2 MB)
             */
            file: string;
        };
        /** CancelPayload */
        CancelPayload: {
            /** Reason */
            reason: string;
        };
        /**
         * CanvasUpdate
         * @description Schema for updating workflow canvas (nodes and edges)
         */
        CanvasUpdate: {
            canvas: components["schemas"]["WorkflowData-Input"];
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** LayoutUpdate */
        LayoutUpdate: {
            /** Nodes */
            nodes: {
                [key: string]: components["schemas"]["NodePos"];
            };
            viewport?: components["schemas"]["Viewport"] | null;
        };
        /**
         * MCPServerAddRequest
         * @description Request model for adding an MCP server.
         */
        MCPServerAddRequest: {
            /**
             * Preset
             * @description Name of a preset MCP server (e.g., 'github', 'linear')
             */
            preset?: string;
            /**
             * Url
             * @description URL of the custom MCP server
             */
            url?: string;
            /**
             * Name
             * @description Name for the custom MCP server
             */
            name?: string;
            /**
             * Auth Token
             * @description Authentication token for the MCP server
             */
            auth_token?: string;
            /**
             * Allowed Tools
             * @description List of allowed tools (None means all)
             */
            allowed_tools?: string[];
        };
        /**
         * MCPServerResponse
         * @description Response model for MCP server info.
         */
        MCPServerResponse: {
            /** Name */
            name: string;
            /** Url */
            url: string;
            /** Tools */
            tools: string[];
            /**
             * Status
             * @default online
             */
            status: string;
            /**
             * Error
             * @description Error message if status is 'error'
             */
            error?: string;
        };
        /**
         * MCPTestConnectionResponse
         * @description Response model for testing MCP server connection.
         */
        MCPTestConnectionResponse: {
            /** Success */
            success: boolean;
            /** Message */
            message: string;
            /** Tools */
            tools?: string[];
        };
        /** MessageCreate */
        MessageCreate: {
            /** Role */
            role: string;
            /** Content */
            content: string;
        };
        /** MessageResponse */
        MessageResponse: {
            /** Id */
            id: number;
            /** Agent Id */
            agent_id: number;
            /** Role */
            role: string;
            /** Content */
            content: string;
            /**
             * Timestamp
             * Format: date-time
             */
            timestamp: string;
        };
        /** NodePos */
        NodePos: {
            /** X */
            x: number;
            /** Y */
            y: number;
        };
        /**
         * Position
         * @description Node position on canvas.
         */
        Position: {
            /** X */
            x: number;
            /** Y */
            y: number;
        };
        /**
         * RunStatus
         * @description Enum-like convenience class for runtime validation.
         *
         *     Using a plain ``str`` subclass keeps the dependency footprint minimal
         *     (avoids importing ``enum.Enum`` repeatedly in pydantic JSON serialisation
         *     hot-paths) while still providing a canonical list of allowed values.
         * @enum {string}
         */
        RunStatus: "queued" | "running" | "success" | "failed";
        /**
         * RunTrigger
         * @enum {string}
         */
        RunTrigger: "manual" | "schedule" | "api";
        /** ScheduleWorkflowPayload */
        ScheduleWorkflowPayload: {
            /** Cron Expression */
            cron_expression: string;
            /** Trigger Config */
            trigger_config?: Record<string, never>;
        };
        /** TemplateDeployRequest */
        TemplateDeployRequest: {
            /** Template Id */
            template_id: number;
            /** Name */
            name?: string | null;
            /** Description */
            description?: string | null;
        };
        /** Thread */
        Thread: {
            /** Title */
            title: string;
            /** Agent State */
            agent_state?: Record<string, never> | null;
            /**
             * Memory Strategy
             * @default buffer
             */
            memory_strategy: string | null;
            /**
             * Active
             * @default true
             */
            active: boolean | null;
            /**
             * Thread Type
             * @default chat
             */
            thread_type: string | null;
            /** Id */
            id: number;
            /** Agent Id */
            agent_id: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
            /**
             * Messages
             * @default []
             */
            messages: components["schemas"]["ThreadMessageResponse"][];
        };
        /** ThreadCreate */
        ThreadCreate: {
            /** Title */
            title: string;
            /** Agent State */
            agent_state?: Record<string, never> | null;
            /**
             * Memory Strategy
             * @default buffer
             */
            memory_strategy: string | null;
            /**
             * Active
             * @default true
             */
            active: boolean | null;
            /**
             * Thread Type
             * @default chat
             */
            thread_type: string | null;
            /** Agent Id */
            agent_id: number;
        };
        /** ThreadMessageCreate */
        ThreadMessageCreate: {
            /** Role */
            role: string;
            /** Content */
            content: string;
            /** Tool Calls */
            tool_calls?: Record<string, never>[] | null;
            /** Tool Call Id */
            tool_call_id?: string | null;
            /** Name */
            name?: string | null;
        };
        /** ThreadMessageResponse */
        ThreadMessageResponse: {
            /** Role */
            role: string;
            /** Content */
            content: string;
            /** Tool Calls */
            tool_calls?: Record<string, never>[] | null;
            /** Tool Call Id */
            tool_call_id?: string | null;
            /** Name */
            name?: string | null;
            /** Id */
            id: number;
            /** Thread Id */
            thread_id: number;
            /**
             * Timestamp
             * Format: date-time
             */
            timestamp: string;
            /**
             * Processed
             * @default false
             */
            processed: boolean;
            /** Parent Id */
            parent_id?: number | null;
            /** Message Type */
            message_type?: string | null;
            /** Tool Name */
            tool_name?: string | null;
        };
        /** ThreadUpdate */
        ThreadUpdate: {
            /** Title */
            title?: string | null;
            /** Agent State */
            agent_state?: Record<string, never> | null;
            /** Memory Strategy */
            memory_strategy?: string | null;
            /** Active */
            active?: boolean | null;
            /** Thread Type */
            thread_type?: string | null;
        };
        /** TokenOut */
        TokenOut: {
            /** Access Token */
            access_token: string;
            /**
             * Token Type
             * @default bearer
             */
            token_type: string;
            /** Expires In */
            expires_in: number;
        };
        /** Trigger */
        Trigger: {
            /** Agent Id */
            agent_id: number;
            /**
             * Type
             * @default webhook
             */
            type: string;
            /** Config */
            config?: Record<string, never> | null;
            /** Id */
            id: number;
            /** Secret */
            secret: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
        };
        /** TriggerCreate */
        TriggerCreate: {
            /** Agent Id */
            agent_id: number;
            /**
             * Type
             * @default webhook
             */
            type: string;
            /** Config */
            config?: Record<string, never> | null;
        };
        /** UserOut */
        UserOut: {
            /** Id */
            id: number;
            /** Email */
            email: string;
            /** Is Active */
            is_active: boolean;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Display Name */
            display_name?: string | null;
            /** Avatar Url */
            avatar_url?: string | null;
            /** Prefs */
            prefs?: Record<string, never> | null;
            /** Last Login */
            last_login?: string | null;
            /**
             * Role
             * @default USER
             */
            role: string;
            /**
             * Gmail Connected
             * @default false
             */
            gmail_connected: boolean;
        };
        /** UserUpdate */
        UserUpdate: {
            /** Display Name */
            display_name?: string | null;
            /** Avatar Url */
            avatar_url?: string | null;
            /** Prefs */
            prefs?: Record<string, never> | null;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /**
         * ValidationResponse
         * @description Response for workflow validation.
         */
        ValidationResponse: {
            /** Is Valid */
            is_valid: boolean;
            /** Errors */
            errors: Record<string, never>[];
            /** Warnings */
            warnings: Record<string, never>[];
        };
        /** Viewport */
        Viewport: {
            /** X */
            x: number;
            /** Y */
            y: number;
            /** Zoom */
            zoom: number;
        };
        /** Workflow */
        Workflow: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /** Id */
            id: number;
            /** Owner Id */
            owner_id: number;
            /** Is Active */
            is_active: boolean;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
            canvas: components["schemas"]["WorkflowData-Output"];
        };
        /** WorkflowCreate */
        WorkflowCreate: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            canvas: components["schemas"]["WorkflowData-Input"];
        };
        /**
         * WorkflowData
         * @description Complete workflow specification.
         */
        "WorkflowData-Input": {
            /** Nodes */
            nodes: components["schemas"]["WorkflowNode"][];
            /** Edges */
            edges: components["schemas"]["WorkflowEdge"][];
        };
        /**
         * WorkflowData
         * @description Complete workflow specification.
         */
        "WorkflowData-Output": {
            /** Nodes */
            nodes: components["schemas"]["WorkflowNode"][];
            /** Edges */
            edges: components["schemas"]["WorkflowEdge"][];
        };
        /**
         * WorkflowEdge
         * @description A directed edge connecting two nodes.
         */
        WorkflowEdge: {
            /** From Node Id */
            from_node_id: string;
            /** To Node Id */
            to_node_id: string;
            /** Config */
            config?: Record<string, never>;
        };
        /**
         * WorkflowNode
         * @description A workflow node (agent, tool, trigger, or conditional).
         */
        WorkflowNode: {
            /** Id */
            id: string;
            /**
             * Type
             * @enum {string}
             */
            type: "agent" | "tool" | "trigger" | "conditional";
            position: components["schemas"]["Position"];
            /** Config */
            config?: Record<string, never>;
        };
        /** WorkflowTemplate */
        WorkflowTemplate: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /** Category */
            category: string;
            canvas: components["schemas"]["WorkflowData-Output"];
            /**
             * Tags
             * @default []
             */
            tags: string[] | null;
            /** Preview Image Url */
            preview_image_url?: string | null;
            /** Id */
            id: number;
            /** Created By */
            created_by: number;
            /** Is Public */
            is_public: boolean;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /** WorkflowTemplateCreate */
        WorkflowTemplateCreate: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /** Category */
            category: string;
            canvas: components["schemas"]["WorkflowData-Input"];
            /**
             * Tags
             * @default []
             */
            tags: string[] | null;
            /** Preview Image Url */
            preview_image_url?: string | null;
        };
        /** WorkflowUpdate */
        WorkflowUpdate: {
            /** Name */
            name?: string | null;
            /** Description */
            description?: string | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    read_agents_api_agents_get: {
        parameters: {
            query?: {
                scope?: string;
                skip?: number;
                limit?: number;
                session_factory?: unknown;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Agent"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_agent_api_agents_post: {
        parameters: {
            query?: {
                session_factory?: unknown;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AgentCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Agent"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_agents_api_agents__get: {
        parameters: {
            query?: {
                scope?: string;
                skip?: number;
                limit?: number;
                session_factory?: unknown;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Agent"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_agent_api_agents__post: {
        parameters: {
            query?: {
                session_factory?: unknown;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AgentCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Agent"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_agent_api_agents__agent_id__get: {
        parameters: {
            query?: {
                session_factory?: unknown;
            };
            header?: never;
            path: {
                agent_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Agent"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_agent_api_agents__agent_id__put: {
        parameters: {
            query?: {
                session_factory?: unknown;
            };
            header?: never;
            path: {
                agent_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AgentUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Agent"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_agent_api_agents__agent_id__delete: {
        parameters: {
            query?: {
                session_factory?: unknown;
            };
            header?: never;
            path: {
                agent_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_agent_details_api_agents__agent_id__details_get: {
        parameters: {
            query?: {
                include?: string | null;
                session_factory?: unknown;
            };
            header?: never;
            path: {
                agent_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AgentDetails"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_agent_messages_api_agents__agent_id__messages_get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
                session_factory?: unknown;
            };
            header?: never;
            path: {
                agent_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_agent_message_api_agents__agent_id__messages_post: {
        parameters: {
            query?: {
                session_factory?: unknown;
            };
            header?: never;
            path: {
                agent_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MessageCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    run_agent_task_api_agents__agent_id__task_post: {
        parameters: {
            query?: {
                session_factory?: unknown;
            };
            header?: never;
            path: {
                agent_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_mcp_servers_api_agents__agent_id__mcp_servers__get: {
        parameters: {
            query?: {
                session_factory?: unknown;
            };
            header?: never;
            path: {
                agent_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MCPServerResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    add_mcp_server_api_agents__agent_id__mcp_servers__post: {
        parameters: {
            query?: {
                session_factory?: unknown;
            };
            header?: never;
            path: {
                agent_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MCPServerAddRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Agent"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    remove_mcp_server_api_agents__agent_id__mcp_servers__server_name__delete: {
        parameters: {
            query?: {
                session_factory?: unknown;
            };
            header?: never;
            path: {
                agent_id: number;
                server_name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    test_mcp_connection_api_agents__agent_id__mcp_servers_test_post: {
        parameters: {
            query?: {
                session_factory?: unknown;
            };
            header?: never;
            path: {
                agent_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MCPServerAddRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MCPTestConnectionResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_available_tools_api_agents__agent_id__mcp_servers_available_tools_get: {
        parameters: {
            query?: {
                session_factory?: unknown;
            };
            header?: never;
            path: {
                agent_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_threads_api_threads_get: {
        parameters: {
            query?: {
                agent_id?: number | null;
                skip?: number;
                limit?: number;
                session_factory?: unknown;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Thread"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_thread_api_threads_post: {
        parameters: {
            query?: {
                session_factory?: unknown;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ThreadCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Thread"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_threads_api_threads__get: {
        parameters: {
            query?: {
                agent_id?: number | null;
                skip?: number;
                limit?: number;
                session_factory?: unknown;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Thread"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_thread_api_threads__post: {
        parameters: {
            query?: {
                session_factory?: unknown;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ThreadCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Thread"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_thread_api_threads__thread_id__get: {
        parameters: {
            query?: {
                session_factory?: unknown;
            };
            header?: never;
            path: {
                thread_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Thread"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_thread_api_threads__thread_id__put: {
        parameters: {
            query?: {
                session_factory?: unknown;
            };
            header?: never;
            path: {
                thread_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ThreadUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Thread"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_thread_api_threads__thread_id__delete: {
        parameters: {
            query?: {
                session_factory?: unknown;
            };
            header?: never;
            path: {
                thread_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_thread_messages_api_threads__thread_id__messages_get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
                session_factory?: unknown;
            };
            header?: never;
            path: {
                thread_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ThreadMessageResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_thread_message_api_threads__thread_id__messages_post: {
        parameters: {
            query?: {
                session_factory?: unknown;
            };
            header?: never;
            path: {
                thread_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ThreadMessageCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ThreadMessageResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    run_thread_api_threads__thread_id__run_post: {
        parameters: {
            query?: {
                session_factory?: unknown;
            };
            header?: never;
            path: {
                thread_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_models_api_models__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    reset_database_api_admin_reset_database_post: {
        parameters: {
            query?: {
                session_factory?: unknown;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    gmail_webhook_api_email_webhook_google_post: {
        parameters: {
            query?: {
                session_factory?: unknown;
            };
            header: {
                "X-Goog-Channel-Token": string;
                "X-Goog-Resource-Id"?: string | null;
                "X-Goog-Message-Number"?: string | null;
                Authorization?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": Record<string, never> | null;
            };
        };
        responses: {
            /** @description Successful Response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_trigger_api_triggers__trigger_id__delete: {
        parameters: {
            query?: {
                session_factory?: unknown;
            };
            header?: never;
            path: {
                trigger_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_triggers_api_triggers__get: {
        parameters: {
            query?: {
                /** @description Filter triggers by agent ID */
                agent_id?: number | null;
                session_factory?: unknown;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Trigger"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_trigger_api_triggers__post: {
        parameters: {
            query?: {
                session_factory?: unknown;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TriggerCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Trigger"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    fire_trigger_event_api_triggers__trigger_id__events_post: {
        parameters: {
            query?: {
                session_factory?: unknown;
            };
            header: {
                "X-Zerg-Timestamp": string;
                "X-Zerg-Signature": string;
            };
            path: {
                trigger_id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful Response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_agent_runs_api_agents__agent_id__runs_get: {
        parameters: {
            query?: {
                limit?: number;
                session_factory?: unknown;
            };
            header?: never;
            path: {
                agent_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AgentRunOut"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_run_api_runs__run_id__get: {
        parameters: {
            query?: {
                session_factory?: unknown;
            };
            header?: never;
            path: {
                run_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AgentRunOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    validate_workflow_api_workflows_validate_post: {
        parameters: {
            query?: {
                session_factory?: unknown;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CanvasUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_workflows_api_workflows__get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
                session_factory?: unknown;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Workflow"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_workflow_api_workflows__post: {
        parameters: {
            query?: {
                session_factory?: unknown;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WorkflowCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Workflow"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_current_workflow_api_workflows_current_get: {
        parameters: {
            query?: {
                session_factory?: unknown;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Workflow"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_current_workflow_canvas_api_workflows_current_canvas_patch: {
        parameters: {
            query?: {
                session_factory?: unknown;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CanvasUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Workflow"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_workflow_api_workflows__workflow_id__delete: {
        parameters: {
            query?: {
                session_factory?: unknown;
            };
            header?: never;
            path: {
                workflow_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    rename_workflow_api_workflows__workflow_id__patch: {
        parameters: {
            query?: {
                session_factory?: unknown;
            };
            header?: never;
            path: {
                workflow_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WorkflowUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Workflow"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_workflow_layout_api_workflows__workflow_id__layout_get: {
        parameters: {
            query?: {
                session_factory?: unknown;
            };
            header?: never;
            path: {
                workflow_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    put_workflow_layout_api_workflows__workflow_id__layout_put: {
        parameters: {
            query?: {
                session_factory?: unknown;
            };
            header?: never;
            path: {
                workflow_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LayoutUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    reserve_workflow_execution_api_workflow_executions__workflow_id__reserve_post: {
        parameters: {
            query?: {
                session_factory?: unknown;
            };
            header?: never;
            path: {
                workflow_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    start_workflow_execution_api_workflow_executions__workflow_id__start_post: {
        parameters: {
            query?: {
                session_factory?: unknown;
            };
            header?: never;
            path: {
                workflow_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    start_reserved_execution_api_workflow_executions_executions__execution_id__start_post: {
        parameters: {
            query?: {
                session_factory?: unknown;
            };
            header?: never;
            path: {
                execution_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_execution_status_api_workflow_executions__execution_id__status_get: {
        parameters: {
            query?: {
                session_factory?: unknown;
            };
            header?: never;
            path: {
                execution_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_execution_logs_api_workflow_executions__execution_id__logs_get: {
        parameters: {
            query?: {
                session_factory?: unknown;
            };
            header?: never;
            path: {
                execution_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_execution_history_api_workflow_executions_history__workflow_id__get: {
        parameters: {
            query?: {
                session_factory?: unknown;
            };
            header?: never;
            path: {
                workflow_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    export_execution_data_api_workflow_executions__execution_id__export_get: {
        parameters: {
            query?: {
                session_factory?: unknown;
            };
            header?: never;
            path: {
                execution_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    cancel_execution_api_workflow_executions__execution_id__cancel_patch: {
        parameters: {
            query?: {
                session_factory?: unknown;
            };
            header?: never;
            path: {
                execution_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CancelPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_workflow_schedule_api_workflow_executions__workflow_id__schedule_get: {
        parameters: {
            query?: {
                session_factory?: unknown;
            };
            header?: never;
            path: {
                workflow_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    schedule_workflow_api_workflow_executions__workflow_id__schedule_post: {
        parameters: {
            query?: {
                session_factory?: unknown;
            };
            header?: never;
            path: {
                workflow_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ScheduleWorkflowPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    unschedule_workflow_api_workflow_executions__workflow_id__schedule_delete: {
        parameters: {
            query?: {
                session_factory?: unknown;
            };
            header?: never;
            path: {
                workflow_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_scheduled_workflows_api_workflow_executions_scheduled_get: {
        parameters: {
            query?: {
                session_factory?: unknown;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    google_sign_in_api_auth_google_post: {
        parameters: {
            query?: {
                session_factory?: unknown;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    [key: string]: string;
                };
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    connect_gmail_api_auth_google_gmail_post: {
        parameters: {
            query?: {
                session_factory?: unknown;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    [key: string]: string;
                };
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: string;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_current_user_api_users_me_get: {
        parameters: {
            query?: {
                session_factory?: unknown;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_current_user_api_users_me_put: {
        parameters: {
            query?: {
                session_factory?: unknown;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    upload_current_user_avatar_api_users_me_avatar_post: {
        parameters: {
            query?: {
                session_factory?: unknown;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_upload_current_user_avatar_api_users_me_avatar_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_templates_api_templates__get: {
        parameters: {
            query?: {
                category?: string | null;
                skip?: number;
                limit?: number;
                my_templates?: boolean;
                session_factory?: unknown;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowTemplate"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_template_api_templates__post: {
        parameters: {
            query?: {
                session_factory?: unknown;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WorkflowTemplateCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowTemplate"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_categories_api_templates_categories_get: {
        parameters: {
            query?: {
                session_factory?: unknown;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_template_api_templates__template_id__get: {
        parameters: {
            query?: {
                session_factory?: unknown;
            };
            header?: never;
            path: {
                template_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowTemplate"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    deploy_template_api_templates_deploy_post: {
        parameters: {
            query?: {
                session_factory?: unknown;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TemplateDeployRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Workflow"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_layout_api_graph_layout_get: {
        parameters: {
            query?: {
                workflow_id?: number | null;
                session_factory?: unknown;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    patch_layout_api_graph_layout_patch: {
        parameters: {
            query?: {
                workflow_id?: number | null;
                session_factory?: unknown;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LayoutUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    system_info_api_system_info_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    _legacy_reset_database_admin_reset_database_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    read_root__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
}
