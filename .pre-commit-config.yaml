# Apply to all files without committing:
#   pre-commit run --all-files
# Update this file:
#   pre-commit autoupdate

repos:
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.6.0
    hooks:
      - id: fix-byte-order-marker
      - id: check-case-conflict
      - id: check-executables-have-shebangs
      - id: check-json

  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.4.4
    hooks:
      - id: ruff
        args: ["--fix"]
        files: ^backend/
      - id: ruff-format
        files: ^backend/

# ---------------------------------------------------------------------------
# Local hooks – Rust lint and DOM-ID prefix guard (frontend)
# ---------------------------------------------------------------------------

  - repo: local
    hooks:
      # CRITICAL: Frontend Contract Validation (prevents API mismatches)
      - id: frontend-contract-validation
        name: Frontend API Contract Validation
        entry: bash -c 'cd frontend-web && npm run validate:contracts'
        language: system
        files: ^(frontend-web/src/.*\.(ts|tsx)|backend/zerg/routers/.*\.py|openapi\.json)$
        pass_filenames: false

      - id: empty-schema-detection
        name: Empty OpenAPI Schema Detection
        entry: scripts/check-empty-schemas.sh
        language: system
        files: ^openapi\.json$
        pass_filenames: false

      - id: rust-clippy
        name: "rust-clippy (frontend)"
        language: system
        # Run Clippy but **do not** fail the commit on warnings.
        entry: bash -c 'cd frontend && cargo clippy --quiet'
        files: ^frontend/

      - id: dom-id-prefix-check
        name: "DOM id prefix rule"
        language: system
        entry: >-
          bash -c "grep -R --line-number --perl-regexp 'id=\"(?!agent-|workflow-|global-|dashboard-|canvas-|profile-|chat-|auth-|user-|modal-|node-|tabs-)\"' frontend/src | if read var; then echo '✖ Non-namespaced DOM id detected:'; echo \"$var\"; exit 1; fi"
        pass_filenames: false
        files: ^asyncapi/

      

      - id: contract-field-validation
        name: "Contract field name validation"
        language: system
        entry: >-
          bash -c "
          echo '🔍 Checking for forbidden field name transformations...';
          if grep -r --include='*.rs' -n '\"from\":\|\"to\":' frontend/src/; then
            echo '❌ FORBIDDEN: Found old field names (from/to) in Rust code.';
            echo 'Use from_node_id/to_node_id instead for contract compliance.';
            exit 1;
          fi;
          if grep -r --include='*.rs' -n 'from.*edge\.' frontend/src/ | grep -v from_node_id; then
            echo '❌ FORBIDDEN: Found potential field name transformation.';
            echo 'Use consistent field naming (from_node_id/to_node_id) throughout.';
            exit 1;
          fi;
          echo '✅ Contract field validation passed';
          "
        pass_filenames: false
        files: ^frontend/

# ---------------------------------------------------------------------------
# CSS lint & formatting hooks (local – use project’s Node deps; no external mirror)
# ---------------------------------------------------------------------------

  - repo: local
    hooks:
      - id: stylelint
        name: stylelint (CSS)
        language: node
        entry: npx --no-install stylelint
        types: [css, scss]
        pass_filenames: true

      - id: prettier
        name: prettier (CSS/Markdown)
        language: node
        entry: npx --no-install prettier --write
        types: [css, scss, markdown]

# ---------------------------------------------------------------------------
# AsyncAPI validation – ensures spec stays syntactically correct
# ---------------------------------------------------------------------------

  - repo: local
    hooks:
      - id: asyncapi-validate
        name: AsyncAPI spec validation
        language: system
        entry: scripts/validate-asyncapi.sh
        pass_filenames: false

# ---------------------------------------------------------------------------
# Tool contract validation – ensures tool schema matches backend registry
# ---------------------------------------------------------------------------

      - id: tool-contract-validation
        name: Tool contract validation
        language: python
        entry: scripts/validate_tool_contracts.py
        additional_dependencies:
          - pyyaml
        pass_filenames: false
        files: ^(asyncapi/tools\.yml|backend/zerg/tools/builtin/.*\.py|frontend/src/components/node_palette\.rs)$

      - id: pact-contract-coverage
        name: Pact WebSocket contract coverage validation
        language: system
        entry: bash -c 'cd frontend && ./check_pact_coverage.sh'
        pass_filenames: false
        files: ^(frontend/src/network/ws_schema\.rs|frontend/src/bin/contract_capture\.rs|backend/zerg/websocket/).*$

      - id: prod-config-guard
        name: Production config guard (no localhost override)
        language: python
        entry: scripts/validate_prod_frontend_config.py
        pass_filenames: false
        files: ^frontend/(build-only\.sh|build-debug\.sh)$

      - id: forbid-legacy-trigger-keys
        name: "Forbid legacy trigger keys in source"
        language: system
        entry: scripts/check_legacy_triggers.sh
        pass_filenames: false
        files: ^frontend/src/

      - id: forbid-direct-node-config-assignment
        name: "Forbid direct node.config = … outside constructors"
        language: system
        entry: >-
          bash -c '
          echo "🔍 Checking for direct node.config assignment…";
          if rg -n --color never "node\\.config\\s*=" frontend/src | rg -v "models\\.rs|node_builder\\.rs|generated"; then
            echo "❌ Direct assignment to node.config detected. Update specific fields or use constructors.";
            exit 1;
          fi;
          echo "✅ No forbidden node.config assignments found";
          '
        pass_filenames: false
        files: ^frontend/src/
