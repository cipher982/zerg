// Generated by generate_tool_types.py - DO NOT EDIT MANUALLY

use serde::{Deserialize, Serialize};

#[derive(Debug, Clone, PartialEq, Eq, Hash, Serialize, Deserialize)]
pub enum ToolName {
    HttpRequest,
    MathEval,
    GetCurrentTime,
    DatetimeDiff,
    GenerateUuid,

}

impl ToolName {
    pub fn as_str(&self) -> &'static str {
        match self {
            Self::HttpRequest => "http_request",
            Self::MathEval => "math_eval",
            Self::GetCurrentTime => "get_current_time",
            Self::DatetimeDiff => "datetime_diff",
            Self::GenerateUuid => "generate_uuid",
        }
    }
    
    pub fn from_str(s: &str) -> Option<Self> {
        match s {
            "http_request" => Some(Self::HttpRequest),
            "math_eval" => Some(Self::MathEval),
            "get_current_time" => Some(Self::GetCurrentTime),
            "datetime_diff" => Some(Self::DatetimeDiff),
            "generate_uuid" => Some(Self::GenerateUuid),
            _ => None,
        }
    }
}

#[derive(Debug, Clone, PartialEq, Eq, Hash, Serialize, Deserialize)]
pub enum ServerName {
    Http,
    Math,
    Datetime,
    Uuid,

}

impl ServerName {
    pub fn as_str(&self) -> &'static str {
        match self {
            Self::Http => "http",
            Self::Math => "math",
            Self::Datetime => "datetime",
            Self::Uuid => "uuid",
        }
    }
    
    pub fn from_str(s: &str) -> Option<Self> {
        match s {
            "http" => Some(Self::Http),
            "math" => Some(Self::Math),
            "datetime" => Some(Self::Datetime),
            "uuid" => Some(Self::Uuid),
            _ => None,
        }
    }
}

/// Compile-time validated tool-to-server mapping
impl ToolName {
    pub fn server_name(&self) -> ServerName {
        match self {
            Self::HttpRequest => ServerName::Http,
            Self::MathEval => ServerName::Math,
            Self::GetCurrentTime => ServerName::Datetime,
            Self::DatetimeDiff => ServerName::Datetime,
            Self::GenerateUuid => ServerName::Uuid,
        }
    }
}

/// Validation functions for runtime checks
pub mod validation {
    
    
    /// Validate that a tool name string matches a known tool
    pub fn validate_tool_name(name: &str) -> bool {
        matches!(name, "http_request" | "math_eval" | "get_current_time" | "datetime_diff" | "generate_uuid")
    }
    
    /// Validate that a server name string matches a known server
    pub fn validate_server_name(name: &str) -> bool {
        matches!(name, "http" | "math" | "datetime" | "uuid")
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    
    #[test]
    fn test_tool_name_roundtrip() {
        for tool in [            ToolName::HttpRequest,
            ToolName::MathEval,
            ToolName::GetCurrentTime,
            ToolName::DatetimeDiff,
            ToolName::GenerateUuid,
        ] {
            let s = tool.as_str();
            assert_eq!(ToolName::from_str(s), Some(tool));
        }
    }
    
    #[test]
    fn test_server_name_roundtrip() {
        for server in [ServerName::Http, ServerName::Math, ServerName::Datetime, ServerName::Uuid] {
            let s = server.as_str();
            assert_eq!(ServerName::from_str(s), Some(server));
        }
    }
    
    #[test]
    fn test_tool_server_mapping() {        assert_eq!(ToolName::HttpRequest.server_name(), ServerName::Http);
        assert_eq!(ToolName::MathEval.server_name(), ServerName::Math);
        assert_eq!(ToolName::GetCurrentTime.server_name(), ServerName::Datetime);
        assert_eq!(ToolName::DatetimeDiff.server_name(), ServerName::Datetime);
        assert_eq!(ToolName::GenerateUuid.server_name(), ServerName::Uuid);
    }
}
