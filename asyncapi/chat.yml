asyncapi: 3.0.0

info:
  title: Zerg WebSocket Protocol
  version: 0.2.0
  description: |
    Refactored to **AsyncAPI 3.0** semantics.  Channels now only declare the
    address + parameters; all publish/subscribe semantics live in the
    *operations* section.

defaultContentType: application/json

# ---------------------------------------------------------------------------
# Channels – pure transport details (no more publish/subscribe keys)
# ---------------------------------------------------------------------------

channels:
  SystemChannel:
    address: system
    description: Global control frames (ping/pong, error, etc.)
    messages:
      SystemMessage:
        $ref: '#/components/messages/SystemMessage'

  ThreadChannel:
    address: thread/{thread_id}
    description: History, streaming responses and user messages for a thread.
    parameters:
      thread_id:
        description: Numeric identifier of the thread.
        examples: ["42"]
    messages:
      ThreadClientMessage:
        $ref: '#/components/messages/ThreadClientMessage'
      StreamStart:
        $ref: '#/components/messages/StreamStart'
      StreamChunk:
        $ref: '#/components/messages/StreamChunk'
      StreamEnd:
        $ref: '#/components/messages/StreamEnd'

  AgentChannel:
    address: agent/{agent_id}
    description: Live agent status / events.
    parameters:
      agent_id:
        description: Numeric identifier of the agent.
        examples: ["17"]
    messages:
      AgentEvent:
        $ref: '#/components/messages/AgentEvent'

# ---------------------------------------------------------------------------
# Components – messages & examples
# ---------------------------------------------------------------------------

components:
  messages:
    SystemMessage:
      name: SystemMessage
      summary: Control frame.
      payload:
        $ref: '#/components/schemas/Envelope'

    ThreadClientMessage:
      name: ThreadClientMessage
      summary: Client-sent message into a thread.
      payload:
        $ref: '#/components/schemas/Envelope'

    StreamStart:
      name: StreamStart
      payload:
        $ref: '#/components/schemas/StreamStart'

    StreamChunk:
      name: StreamChunk
      payload:
        $ref: '#/components/schemas/StreamChunk'

    StreamEnd:
      name: StreamEnd
      payload:
        $ref: '#/components/schemas/StreamEnd'

    AgentEvent:
      name: AgentEvent
      payload:
        $ref: '#/components/schemas/AgentEvent'

  schemas:
    # Envelope and other schemas copied from previous draft -----------------
    Envelope:
      type: object
      required: [v, type, topic, ts, data]
      properties:
        v:
          type: integer
          const: 1
        type:
          type: string
        topic:
          type: string
        ts:
          type: integer
        req_id:
          type: string
          nullable: true
        data:
          type: object

    StreamStart:
      type: object
      required: [type, thread_id]
      properties:
        type:
          const: stream_start
        thread_id:
          type: integer

    StreamEnd:
      type: object
      required: [type, thread_id]
      properties:
        type:
          const: stream_end
        thread_id:
          type: integer

    StreamChunk:
      type: object
      required: [type, thread_id, content, chunk_type]
      properties:
        type:
          const: stream_chunk
        thread_id:
          type: integer
        content:
          type: string
        chunk_type:
          type: string
          enum: [assistant_token, assistant_message, tool_output]
        tool_name:
          type: string
          nullable: true
        tool_call_id:
          type: string
          nullable: true

    AgentEvent:
      type: object
      required: [type, data]
      properties:
        type:
          const: agent_event
        data:
          type: object
          additionalProperties: true

# examples moved or removed (AsyncAPI 3 does not support components.examples)

# ---------------------------------------------------------------------------
# Operations – send vs receive semantics (replace v2 publish/subscribe)
# ---------------------------------------------------------------------------

operations:
  ReceiveSystem:
    action: receive
    channel: { $ref: '#/channels/SystemChannel' }
    messages:
      - $ref: '#/channels/SystemChannel/messages/SystemMessage'

  SendThreadMessage:
    action: send
    channel: { $ref: '#/channels/ThreadChannel' }
    messages:
      - $ref: '#/channels/ThreadChannel/messages/ThreadClientMessage'

  ReceiveThreadHistory:
    action: receive
    channel: { $ref: '#/channels/ThreadChannel' }
    messages:
      - $ref: '#/channels/ThreadChannel/messages/StreamStart'  # using StreamStart as placeholder

  ReceiveThreadStream:
    action: receive
    channel: { $ref: '#/channels/ThreadChannel' }
    messages:
      - $ref: '#/channels/ThreadChannel/messages/StreamStart'
      - $ref: '#/channels/ThreadChannel/messages/StreamChunk'
      - $ref: '#/channels/ThreadChannel/messages/StreamEnd'

  ReceiveAgentEvent:
    action: receive
    channel: { $ref: '#/channels/AgentChannel' }
    messages:
      - $ref: '#/channels/AgentChannel/messages/AgentEvent'

# End of file
