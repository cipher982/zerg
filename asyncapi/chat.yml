asyncapi: 3.0.0

# ---------------------------------------------------------------------------
# Zerg Chat Contract – AsyncAPI 3.0  (Phase-1 draft)
# ---------------------------------------------------------------------------
#  • Captures the structure of *enveloped* WebSocket frames used by Zerg.
#  • Only a subset of messages is modelled so far (system, thread, agent).
#  • Most payload objects are imported 1-to-1 from backend/zerg/schemas/ws_messages.py.
#  • Additional examples & exhaustive schemas will follow in Phase-2.
# ---------------------------------------------------------------------------

info:
  title: Zerg WebSocket Protocol
  version: 0.1.0
  description: |
    Draft – internal use only.

servers:
  local:
    host: localhost:8001
    protocol: ws
    description: Local development FastAPI server.
  production:
    host: ws.zerg.ai
    protocol: wss
    description: Production cluster entry-point.

defaultContentType: application/json

# ---------------------------------------------------------------------------
# Core envelope
# ---------------------------------------------------------------------------

components:
  schemas:
    Envelope:
      type: object
      required: [v, type, topic, ts, data]
      properties:
        v:
          type: integer
          const: 1
          description: Protocol version (currently always **1**).
        type:
          $ref: '#/components/schemas/MessageType'
        topic:
          type: string
          description: Topic such as `thread:42` or `agent:17`.
        req_id:
          type: string
          nullable: true
        ts:
          type: integer
          description: Milliseconds since Unix epoch (generated server-side).
        data:
          description: Message payload – structure depends on **type**.
          oneOf:
            - $ref: '#/components/schemas/SystemMessage'
            - $ref: '#/components/schemas/ThreadHistory'
            - $ref: '#/components/schemas/StreamChunk'
            - $ref: '#/components/schemas/StreamStart'
            - $ref: '#/components/schemas/StreamEnd'
            - $ref: '#/components/schemas/AgentEvent'

    # ---------------------------------------------------------------------
    # Enumerations
    # ---------------------------------------------------------------------

    MessageType:
      type: string
      description: |
        Canonical message types (lower-case snake case in production).  
        Only the ones referenced in this Phase-1 draft are listed; the rest
        will be added as the spec matures.
      enum:
        - ping
        - pong
        - error
        - subscribe_thread
        - thread_history
        - stream_start
        - stream_chunk
        - stream_end
        - agent_event

    ChunkType:
      type: string
      enum:
        - assistant_token
        - assistant_message
        - tool_output

    # ---------------------------------------------------------------------
    # Payload objects (data field of envelope)
    # ---------------------------------------------------------------------

    SystemMessage:
      type: object
      required: [type]
      properties:
        type:
          enum: [ping, pong, error]
        error:
          type: string
          nullable: true
        details:
          type: object
          additionalProperties: true
          nullable: true

    ThreadHistory:
      type: object
      required: [type, thread_id, messages]
      properties:
        type:
          const: thread_history
        thread_id:
          type: integer
        messages:
          type: array
          items:
            type: object
            description: Raw DB message rows – see REST schema.

    StreamStart:
      type: object
      required: [type, thread_id]
      properties:
        type:
          const: stream_start
        thread_id:
          type: integer

    StreamEnd:
      type: object
      required: [type, thread_id]
      properties:
        type:
          const: stream_end
        thread_id:
          type: integer

    StreamChunk:
      type: object
      required: [type, thread_id, content, chunk_type]
      properties:
        type:
          const: stream_chunk
        thread_id:
          type: integer
        content:
          type: string
        chunk_type:
          $ref: '#/components/schemas/ChunkType'
        tool_name:
          type: string
          nullable: true
        tool_call_id:
          type: string
          nullable: true

    AgentEvent:
      type: object
      required: [type, data]
      properties:
        type:
          const: agent_event
        data:
          type: object
          additionalProperties: true

# ---------------------------------------------------------------------------
# Channels
# ---------------------------------------------------------------------------

channels:
  system:
    subscribe:
      message:
        name: SystemMessage
        payload:
          $ref: '#/components/schemas/Envelope'

  thread/{thread_id}:
    parameters:
      thread_id:
        schema:
          type: integer
    publish:
      message:
        name: ThreadClientMessage
        payload:
          $ref: '#/components/schemas/Envelope'
    subscribe:
      message:
        name: ThreadServerMessage
        payload:
          $ref: '#/components/schemas/Envelope'

  agent/{agent_id}:
    parameters:
      agent_id:
        schema:
          type: integer
    subscribe:
      message:
        name: AgentEventMessage
        payload:
          $ref: '#/components/schemas/Envelope'

# ---------------------------------------------------------------------------
# Examples – a single happy-path interaction (more coming Phase-2)
# ---------------------------------------------------------------------------

examples:
  ping:
    summary: Client ping frame
    value:
      v: 1
      type: ping
      topic: system
      ts: 1710000000000
      data:
        type: ping

  stream_chunk_token:
    summary: Assistant token chunk
    value:
      v: 1
      type: stream_chunk
      topic: thread:42
      ts: 1710000000123
      data:
        type: stream_chunk
        thread_id: 42
        content: "Hello"
        chunk_type: assistant_token

# End of file
