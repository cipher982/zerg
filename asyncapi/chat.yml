asyncapi: 3.0.0

info:
  title: Zerg WebSocket Protocol
  version: 0.2.0
  description: |
    Refactored to **AsyncAPI 3.0** semantics.  Channels now only declare the
    address + parameters; all publish/subscribe semantics live in the
    *operations* section.

defaultContentType: application/json

# ---------------------------------------------------------------------------
# Channels – pure transport details (no more publish/subscribe keys)
# ---------------------------------------------------------------------------

channels:
  SystemChannel:
    address: system
    description: Global control frames (ping/pong, error, etc.)
    messages:
      SystemMessage:
        $ref: '#/components/messages/SystemMessage'
      Ping:
        $ref: '#/components/messages/Ping'
      Pong:
        $ref: '#/components/messages/Pong'
      Error:
        $ref: '#/components/messages/Error'

  ThreadChannel:
    # NOTE: Runtime topics use a colon delimiter ("thread:42").  We align the
    # AsyncAPI *address* to that real-world format so generated SDKs match the
    # actual subscription strings.
    address: thread:{thread_id}
    description: History, streaming responses and user messages for a thread.
    parameters:
      thread_id:
        description: Numeric identifier of the thread.
        examples: ["42"]
    messages:
      SendMessage:
        $ref: '#/components/messages/SendMessage'
      StreamStart:
        $ref: '#/components/messages/StreamStart'
      StreamChunk:
        $ref: '#/components/messages/StreamChunk'
      StreamEnd:
        $ref: '#/components/messages/StreamEnd'
      ThreadHistory:
        $ref: '#/components/messages/ThreadHistory'

  AgentChannel:
    address: agent:{agent_id}
    description: Live agent status / events.
    parameters:
      agent_id:
        description: Numeric identifier of the agent.
        examples: ["17"]
    messages:
      AgentEvent:
        $ref: '#/components/messages/AgentEvent'

  # ---------------------------------------------------------------------
  #  New: Workflow execution status & logs (visual workflow canvas)
  # ---------------------------------------------------------------------

  WorkflowExecutionChannel:
    address: workflow_execution:{execution_id}
    description: Live per-node updates, finish event and logs for a workflow execution.
    parameters:
      execution_id:
        description: Numeric identifier of the execution run.
        examples: ["123"]
    messages:
      NodeState:
        $ref: '#/components/messages/NodeState'
      ExecutionFinished:
        $ref: '#/components/messages/ExecutionFinished'
      NodeLog:
        $ref: '#/components/messages/NodeLog'

# ---------------------------------------------------------------------------
# Components – messages & examples
# ---------------------------------------------------------------------------

components:
  messages:
    SystemMessage:
      name: SystemMessage
      summary: Control frame.
      payload:
        $ref: '#/components/schemas/Envelope'

    Ping:
      name: Ping
      summary: Heart-beat ping sent by **server**; clients must reply with Pong.
      payload:
        $ref: '#/components/schemas/Ping'

    Pong:
      name: Pong
      summary: Heart-beat response; echoes `ping_id` received in Ping.
      payload:
        $ref: '#/components/schemas/Pong'

    Error:
      name: Error
      summary: Protocol or application level error.
      payload:
        $ref: '#/components/schemas/Error'

    SendMessage:
      name: SendMessage
      summary: Client-sent chat message for a thread.
      payload:
        $ref: '#/components/schemas/SendMessage'

    StreamStart:
      name: StreamStart
      payload:
        $ref: '#/components/schemas/StreamStart'

    StreamChunk:
      name: StreamChunk
      payload:
        $ref: '#/components/schemas/StreamChunk'

    StreamEnd:
      name: StreamEnd
      payload:
        $ref: '#/components/schemas/StreamEnd'

    ThreadHistory:
      name: ThreadHistory
      payload:
        $ref: '#/components/schemas/ThreadHistory'

    AgentEvent:
      name: AgentEvent
      payload:
        $ref: '#/components/schemas/AgentEvent'

    # ------------------------------------------------------------------
    #  Workflow execution messages
    # ------------------------------------------------------------------

    NodeState:
      name: NodeState
      summary: Per-node live status update during workflow execution.
      payload:
        $ref: '#/components/schemas/NodeState'

    ExecutionFinished:
      name: ExecutionFinished
      summary: Emitted once when the entire workflow run finishes.
      payload:
        $ref: '#/components/schemas/ExecutionFinished'

    NodeLog:
      name: NodeLog
      summary: Single stdout/stderr line emitted by a node while running.
      payload:
        $ref: '#/components/schemas/NodeLog'

  schemas:
    # Envelope and other schemas copied from previous draft -----------------
    Envelope:
      type: object
      required: [v, type, topic, ts, data]
      properties:
        v:
          type: integer
          const: 1
        type:
          type: string
        topic:
          type: string
        ts:
          type: integer
        req_id:
          type: string
          nullable: true
        data:
          type: object

    StreamStart:
      type: object
      required: [type, thread_id]
      properties:
        type:
          const: stream_start
        thread_id:
          type: integer
      examples:
        - type: stream_start
          thread_id: 42

    StreamEnd:
      type: object
      required: [type, thread_id]
      properties:
        type:
          const: stream_end
        thread_id:
          type: integer
      examples:
        - type: stream_end
          thread_id: 42

    StreamChunk:
      type: object
      required: [type, thread_id, content, chunk_type]
      properties:
        type:
          const: stream_chunk
        thread_id:
          type: integer
        content:
          type: string
        chunk_type:
          type: string
          enum: [assistant_token, assistant_message, tool_output]
        tool_name:
          type: string
          nullable: true
        tool_call_id:
          type: string
          nullable: true
      examples:
        - type: stream_chunk
          thread_id: 42
          content: "Hello"
          chunk_type: assistant_token
        - type: stream_chunk
          thread_id: 42
          content: "Complete sentence."
          chunk_type: assistant_message

    AgentEvent:
      type: object
      required: [type, data]
      properties:
        type:
          const: agent_event
        data:
          type: object
          additionalProperties: true
      examples:
        - type: agent_event
          data:
            status: "RUNNING"
            run_id: "run_123"

    # ------------------------------------------------------------------
    #  Workflow execution schemas
    # ------------------------------------------------------------------

    NodeState:
      type: object
      required: [type, execution_id, node_id, status]
      properties:
        type:
          const: node_state
        execution_id:
          type: integer
        node_id:
          type: string
        status:
          type: string
          enum: [running, success, failed]
        output:
          type: object
          nullable: true
        error:
          type: string
          nullable: true
      examples:
        - type: node_state
          execution_id: 123
          node_id: "uid-7"
          status: running

    ExecutionFinished:
      type: object
      required: [type, execution_id, status]
      properties:
        type:
          const: execution_finished
        execution_id:
          type: integer
        status:
          type: string
          enum: [success, failed]
        error:
          type: string
          nullable: true
        duration_ms:
          type: integer
          nullable: true
      examples:
        - type: execution_finished
          execution_id: 123
          status: success
          duration_ms: 8421

    NodeLog:
      type: object
      required: [type, execution_id, node_id, stream, text]
      properties:
        type:
          const: node_log
        execution_id:
          type: integer
        node_id:
          type: string
        stream:
          type: string
          enum: [stdout, stderr]
        text:
          type: string
      examples:
        - type: node_log
          execution_id: 123
          node_id: "uid-7"
          stream: stdout
          text: "Connecting to database…"

    # Heart-beat ping / pong ----------------------------------------------

    Ping:
      type: object
      required: [type, ping_id]
      properties:
        type:
          const: ping
        ping_id:
          type: string
      examples:
        - type: ping
          ping_id: "abc123"

    Pong:
      type: object
      required: [type, ping_id]
      properties:
        type:
          const: pong
        ping_id:
          type: string
      examples:
        - type: pong
          ping_id: "abc123"

    # Error frame ----------------------------------------------------------

    Error:
      type: object
      required: [type, code, message]
      properties:
        type:
          const: error
        code:
          type: integer
        message:
          type: string
        details:
          type: object
          nullable: true
      examples:
        - type: error
          code: 1002
          message: "INVALID_PAYLOAD"

    # Thread history -------------------------------------------------------

    ThreadHistory:
      type: object
      required: [type, thread_id, messages]
      properties:
        type:
          const: thread_history
        thread_id:
          type: integer
        messages:
          type: array
          items:
            type: object
            additionalProperties: true
      examples:
        - type: thread_history
          thread_id: 42
          messages:
            - id: 1
              role: user
              content: "Hello!"
            - id: 2
              role: assistant
              content: "Hi, how can I help?"

    # ------------------------------------------------------------------
    #  Client → Server  send_message  -----------------------------------
    # ------------------------------------------------------------------

    SendMessage:
      type: object
      required: [type, thread_id, content]
      properties:
        type:
          const: send_message
        thread_id:
          type: integer
        content:
          type: string
        metadata:
          type: object
          nullable: true
      examples:
        - type: send_message
          thread_id: 42
          content: "Hello, world!"
          metadata:
            tone: friendly

# examples moved or removed (AsyncAPI 3 does not support components.examples)

# ---------------------------------------------------------------------------
# Operations – send vs receive semantics (replace v2 publish/subscribe)
# ---------------------------------------------------------------------------

operations:
  ReceiveSystem:
    action: receive
    channel: { $ref: '#/channels/SystemChannel' }
    messages:
      - $ref: '#/channels/SystemChannel/messages/SystemMessage'

  SendThreadMessage:
    action: send
    channel: { $ref: '#/channels/ThreadChannel' }
    messages:
      - $ref: '#/channels/ThreadChannel/messages/SendMessage'

  ReceiveThreadHistory:
    action: receive
    channel: { $ref: '#/channels/ThreadChannel' }
    messages:
      - $ref: '#/channels/ThreadChannel/messages/ThreadHistory'

  ReceiveThreadStream:
    action: receive
    channel: { $ref: '#/channels/ThreadChannel' }
    messages:
      - $ref: '#/channels/ThreadChannel/messages/StreamStart'
      - $ref: '#/channels/ThreadChannel/messages/StreamChunk'
      - $ref: '#/channels/ThreadChannel/messages/StreamEnd'

  ReceiveAgentEvent:
    action: receive
    channel: { $ref: '#/channels/AgentChannel' }
    messages:
      - $ref: '#/channels/AgentChannel/messages/AgentEvent'

  # -------------------------------------------------------------------
  #  Workflow execution operations
  # -------------------------------------------------------------------

  ReceiveNodeState:
    action: receive
    channel: { $ref: '#/channels/WorkflowExecutionChannel' }
    messages:
      - $ref: '#/channels/WorkflowExecutionChannel/messages/NodeState'

  ReceiveExecutionFinished:
    action: receive
    channel: { $ref: '#/channels/WorkflowExecutionChannel' }
    messages:
      - $ref: '#/channels/WorkflowExecutionChannel/messages/ExecutionFinished'

  ReceiveNodeLog:
    action: receive
    channel: { $ref: '#/channels/WorkflowExecutionChannel' }
    messages:
      - $ref: '#/channels/WorkflowExecutionChannel/messages/NodeLog'

  ReceivePing:
    action: receive
    channel: { $ref: '#/channels/SystemChannel' }
    messages:
      - $ref: '#/channels/SystemChannel/messages/Ping'

  SendPong:
    action: send
    channel: { $ref: '#/channels/SystemChannel' }
    messages:
      - $ref: '#/channels/SystemChannel/messages/Pong'

  ReceiveError:
    action: receive
    channel: { $ref: '#/channels/SystemChannel' }
    messages:
      - $ref: '#/channels/SystemChannel/messages/Error'

# End of file
