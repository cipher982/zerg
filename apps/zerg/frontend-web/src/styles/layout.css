/* Layout utility classes â€“ Phase 3 groundwork */

/* Grid helpers */
.grid {
  display: grid;
  gap: var(--spacing-lg);
}

.grid-2 {
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
}

.grid-3 {
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
}

.grid-4 {
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
}

/* Flex helpers */
.flex {
  display: flex;
}

.flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

.flex-column {
  display: flex;
  flex-direction: column;
}

/* Spacer helper */
.spacer {
  flex: 1 1 auto;
}

/* --------------------------------------------------------- */
/* Application grid layout (header, tabs, content, status)   */
/* --------------------------------------------------------- */

html,
body {
  height: 100%;
}

/* Body simply hosts the React root and suppresses document scrolling */
body {
  margin: 0;
  overflow: hidden;
}

/* The React root acts as the application grid */
#react-root {
  display: grid;
  grid-template-rows: auto auto 1fr auto;
  height: 100%;
  min-height: 100vh; /* fallback */
  min-height: 100dvh; /* modern viewport */
  width: 100%;
}

/* Place elements explicitly so order in DOM does not matter */
.header { grid-row: 1; }
.tabs-container { grid-row: 2; }
.status-bar { grid-row: 4; }

/* Content containers occupy the main viewport row */
#app-container {
  grid-row: 3;
  min-height: 0; /* allow pages to size and scroll */
  width: 100%;
  display: flex;
  flex-direction: column;
  align-items: stretch;
  justify-content: flex-start;
  overflow: hidden; /* no container scroll - individual pages handle their own */
  position: relative;
}

/* Ensure direct children can manage their own scrolling */
#app-container > * {
  flex: 1 1 auto;
  min-height: 0;
  width: 100%;
}
