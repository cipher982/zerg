#!/usr/bin/env node

/**
 * Simplified Visual Test Demo
 *
 * Demonstrates AI-powered visual testing without complex dependencies
 */

import { chromium } from 'playwright';
import OpenAI from 'openai';
import fs from 'fs';
import path from 'path';

// UI variants to test
const UI_VARIANTS = [
  {
    name: 'rust-dashboard',
    url: '/',
    description: 'Legacy Rust/WASM UI (target design to match)'
  },
  {
    name: 'react-dashboard',
    url: '/react/index.html',
    description: 'New React Prototype UI (requires alignment with legacy)'
  }
];

// Initialize OpenAI
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

async function captureScreenshots(page, variants) {
  const screenshots = {};

  for (const variant of variants) {
    console.log(`📸 Capturing ${variant.name}...`);

    await page.goto(`http://localhost:47200${variant.url}`);
    await page.waitForLoadState('networkidle');
    await page.waitForTimeout(2000);

    const screenshot = await page.screenshot({
      fullPage: true,
      animations: 'disabled'
    });

    screenshots[variant.name] = screenshot;

    // Save screenshot
    const screenshotPath = `visual-reports/${variant.name}-${Date.now()}.png`;
    if (!fs.existsSync('visual-reports')) {
      fs.mkdirSync('visual-reports', { recursive: true });
    }
    fs.writeFileSync(screenshotPath, screenshot);
    console.log(`   → Saved: ${screenshotPath}`);
  }

  return screenshots;
}

async function analyzeWithAI(screenshots) {
  console.log('🤖 Analyzing differences with GPT-4o...');

  const prompt = `
Compare these two user interface screenshots for a dashboard application.

**Context:**
- Image 1: Rust/WASM UI (LEGACY - this is the target design to match)
- Image 2: React UI (NEW - this needs to be updated to match the legacy design)

**Analysis Required:**

1. **Critical Differences** (Must Fix)
   - Layout structure differences
   - Missing or extra UI elements
   - Significant color/branding inconsistencies

2. **Styling Inconsistencies** (Should Fix)
   - Typography differences (font, size, weight)
   - Button and component styling
   - Spacing and alignment issues

3. **Implementation Recommendations**
   - Specific CSS changes needed
   - Priority order for fixes
   - Exact measurements where possible

Be extremely specific and actionable in your recommendations.
`;

  const rustScreenshot = screenshots['rust-dashboard'];
  const reactScreenshot = screenshots['react-dashboard'];

  try {
    const response = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [
        {
          role: "user",
          content: [
            { type: "text", text: prompt },
            { type: "text", text: "RUST UI (Legacy - Target):" },
            {
              type: "image_url",
              image_url: {
                url: `data:image/png;base64,${rustScreenshot.toString('base64')}`,
                detail: "high"
              }
            },
            { type: "text", text: "REACT UI (New - Needs Updates):" },
            {
              type: "image_url",
              image_url: {
                url: `data:image/png;base64,${reactScreenshot.toString('base64')}`,
                detail: "high"
              }
            }
          ]
        }
      ],
      max_tokens: 2500,
      temperature: 0.1
    });

    const analysis = response.choices[0].message.content;

    // Save report
    const reportPath = `visual-reports/ai-analysis-${new Date().toISOString().replace(/[:.]/g, '-')}.md`;
    const report = `# AI Visual Analysis Report

**Generated**: ${new Date().toISOString()}
**Model**: gpt-4o
**Token Usage**: ${JSON.stringify(response.usage, null, 2)}

## Analysis

${analysis}

---
*Generated by AI Visual Testing Framework*
`;

    fs.writeFileSync(reportPath, report);
    console.log(`📄 Report saved: ${reportPath}`);

    return { analysis, reportPath, usage: response.usage };

  } catch (error) {
    console.error('❌ AI analysis failed:', error.message);
    throw error;
  }
}

async function main() {
  console.log('🚀 AI-Powered Visual Testing Demo\n');

  if (!process.env.OPENAI_API_KEY) {
    console.error('❌ Missing OPENAI_API_KEY environment variable');
    process.exit(1);
  }

  // Launch browser
  console.log('🌐 Launching browser...');
  const browser = await chromium.launch({ headless: true });
  const page = await browser.newPage({
    viewport: { width: 1920, height: 1080 }
  });

  try {
    // Test server
    console.log('🔍 Testing server connection...');
    await page.goto('http://localhost:47200/ui-switch.html');
    await page.waitForLoadState('networkidle');
    console.log('✅ Server accessible');

    // Capture screenshots
    console.log('\n📸 Capturing screenshots...');
    const screenshots = await captureScreenshots(page, UI_VARIANTS);
    console.log(`✅ Captured ${Object.keys(screenshots).length} screenshots`);

    // AI Analysis
    console.log('\n🤖 Running AI analysis...');
    const result = await analyzeWithAI(screenshots);

    console.log('✅ Analysis complete!');
    console.log(`💰 Tokens used: ${result.usage?.total_tokens}`);

    // Show preview
    console.log('\n📋 Analysis Preview:');
    console.log('═'.repeat(60));
    console.log(result.analysis.slice(0, 1000) + '...');
    console.log('═'.repeat(60));

    console.log('\n🎉 Demo complete!');
    console.log(`📄 Full report: ${result.reportPath}`);

  } catch (error) {
    console.error('\n❌ Demo failed:', error.message);
    throw error;
  } finally {
    await browser.close();
  }
}

// Run demo
main()
  .then(() => {
    console.log('\n🏁 Success!');
    process.exit(0);
  })
  .catch((error) => {
    console.error('\n💥 Failed:', error);
    process.exit(1);
  });