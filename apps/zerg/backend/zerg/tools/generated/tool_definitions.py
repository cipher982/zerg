# Generated by generate_tool_types.py - DO NOT EDIT MANUALLY

from enum import Enum
from typing import Dict
from typing import List
from typing import Optional


class ToolName(str, Enum):
    """Built-in tool names available in the registry."""

    HTTP_REQUEST = "http_request"
    MATH_EVAL = "math_eval"
    GET_CURRENT_TIME = "get_current_time"
    DATETIME_DIFF = "datetime_diff"
    GENERATE_UUID = "generate_uuid"


class ServerName(str, Enum):
    """Server/module names for tools."""

    HTTP = "http"
    MATH = "math"
    DATETIME = "datetime"
    UUID = "uuid"


# Tool to server mapping for validation
TOOL_SERVER_MAPPING: Dict[ToolName, ServerName] = {
    ToolName.HTTP_REQUEST: ServerName.HTTP,
    ToolName.MATH_EVAL: ServerName.MATH,
    ToolName.GET_CURRENT_TIME: ServerName.DATETIME,
    ToolName.DATETIME_DIFF: ServerName.DATETIME,
    ToolName.GENERATE_UUID: ServerName.UUID,
}


def validate_tool_registration(tool_name: str, server_name: str) -> bool:
    """Validate that tool-server pairing matches schema."""
    try:
        tool_enum = ToolName(tool_name)
        server_enum = ServerName(server_name)
        return TOOL_SERVER_MAPPING.get(tool_enum) == server_enum
    except ValueError:
        return False


def get_expected_server(tool_name: str) -> Optional[str]:
    """Get expected server name for a tool."""
    try:
        tool_enum = ToolName(tool_name)
        return TOOL_SERVER_MAPPING[tool_enum].value
    except (ValueError, KeyError):
        return None


def list_all_tools() -> List[str]:
    """List all valid tool names."""
    return [tool.value for tool in ToolName]


def list_all_servers() -> List[str]:
    """List all valid server names."""
    return [server.value for server in ServerName]
