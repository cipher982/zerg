/*
 * Zerg Agent Platform API
 *
 * Complete REST API specification for the Zerg Agent Platform. This schema is the single source of truth for frontend-backend contracts.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ThreadMessageCreate {
    #[serde(rename = "role")]
    pub role: String,
    #[serde(rename = "content")]
    pub content: String,
    #[serde(rename = "tool_calls", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub tool_calls: Option<Option<Vec<serde_json::Value>>>,
    #[serde(rename = "tool_call_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub tool_call_id: Option<Option<String>>,
    #[serde(rename = "name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub name: Option<Option<String>>,
}

impl ThreadMessageCreate {
    pub fn new(role: String, content: String) -> ThreadMessageCreate {
        ThreadMessageCreate {
            role,
            content,
            tool_calls: None,
            tool_call_id: None,
            name: None,
        }
    }
}

