/*
 * Zerg Agent Platform API
 *
 * Complete REST API specification for the Zerg Agent Platform. This schema is the single source of truth for frontend-backend contracts.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// McpServerAddRequest : Request model for adding an MCP server.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct McpServerAddRequest {
    /// Name of a preset MCP server (e.g., 'github', 'linear')
    #[serde(rename = "preset", skip_serializing_if = "Option::is_none")]
    pub preset: Option<String>,
    /// URL of the custom MCP server
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    /// Name for the custom MCP server
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Authentication token for the MCP server
    #[serde(rename = "auth_token", skip_serializing_if = "Option::is_none")]
    pub auth_token: Option<String>,
    /// List of allowed tools (None means all)
    #[serde(rename = "allowed_tools", skip_serializing_if = "Option::is_none")]
    pub allowed_tools: Option<Vec<String>>,
}

impl McpServerAddRequest {
    /// Request model for adding an MCP server.
    pub fn new() -> McpServerAddRequest {
        McpServerAddRequest {
            preset: None,
            url: None,
            name: None,
            auth_token: None,
            allowed_tools: None,
        }
    }
}

