/*
 * Zerg Agent Platform API
 *
 * Complete REST API specification for the Zerg Agent Platform. This schema is the single source of truth for frontend-backend contracts.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// WorkflowNode : A workflow node (agent, tool, trigger, or conditional).
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct WorkflowNode {
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "type")]
    pub r#type: Type,
    #[serde(rename = "position")]
    pub position: Box<models::Position>,
    #[serde(rename = "config", skip_serializing_if = "Option::is_none")]
    pub config: Option<serde_json::Value>,
}

impl WorkflowNode {
    /// A workflow node (agent, tool, trigger, or conditional).
    pub fn new(id: String, r#type: Type, position: models::Position) -> WorkflowNode {
        WorkflowNode {
            id,
            r#type,
            position: Box::new(position),
            config: None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "agent")]
    Agent,
    #[serde(rename = "tool")]
    Tool,
    #[serde(rename = "trigger")]
    Trigger,
    #[serde(rename = "conditional")]
    Conditional,
}

impl Default for Type {
    fn default() -> Type {
        Self::Agent
    }
}

