/*
 * Zerg Agent Platform API
 *
 * Complete REST API specification for the Zerg Agent Platform. This schema is the single source of truth for frontend-backend contracts.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ThreadUpdate {
    #[serde(rename = "title", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub title: Option<Option<String>>,
    #[serde(rename = "agent_state", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub agent_state: Option<Option<serde_json::Value>>,
    #[serde(rename = "memory_strategy", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub memory_strategy: Option<Option<String>>,
    #[serde(rename = "active", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub active: Option<Option<bool>>,
    #[serde(rename = "thread_type", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub thread_type: Option<Option<String>>,
}

impl ThreadUpdate {
    pub fn new() -> ThreadUpdate {
        ThreadUpdate {
            title: None,
            agent_state: None,
            memory_strategy: None,
            active: None,
            thread_type: None,
        }
    }
}

