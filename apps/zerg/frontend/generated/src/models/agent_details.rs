/*
 * Zerg Agent Platform API
 *
 * Complete REST API specification for the Zerg Agent Platform. This schema is the single source of truth for frontend-backend contracts.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// AgentDetails : Envelope object returned by the Agent *details* REST endpoint.  In Phase 1 we only populate the mandatory ``agent`` field.  The optional ``threads``, ``runs`` and ``stats`` keys are included so that the response shape is forwards-compatible with the richer payloads planned for future phases (see *agent_debug_modal_design.md*).
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AgentDetails {
    #[serde(rename = "agent")]
    pub agent: Box<models::Agent>,
    #[serde(rename = "threads", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub threads: Option<Option<Vec<models::Thread>>>,
    #[serde(rename = "runs", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub runs: Option<Option<Vec<serde_json::Value>>>,
    #[serde(rename = "stats", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub stats: Option<Option<serde_json::Value>>,
}

impl AgentDetails {
    /// Envelope object returned by the Agent *details* REST endpoint.  In Phase 1 we only populate the mandatory ``agent`` field.  The optional ``threads``, ``runs`` and ``stats`` keys are included so that the response shape is forwards-compatible with the richer payloads planned for future phases (see *agent_debug_modal_design.md*).
    pub fn new(agent: models::Agent) -> AgentDetails {
        AgentDetails {
            agent: Box::new(agent),
            threads: None,
            runs: None,
            stats: None,
        }
    }
}

