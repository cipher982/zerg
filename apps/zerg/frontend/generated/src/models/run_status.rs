/*
 * Zerg Agent Platform API
 *
 * Complete REST API specification for the Zerg Agent Platform. This schema is the single source of truth for frontend-backend contracts.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// RunStatus : Enum-like convenience class for runtime validation.  Using a plain ``str`` subclass keeps the dependency footprint minimal (avoids importing ``enum.Enum`` repeatedly in pydantic JSON serialisation hot-paths) while still providing a canonical list of allowed values.
/// Enum-like convenience class for runtime validation.  Using a plain ``str`` subclass keeps the dependency footprint minimal (avoids importing ``enum.Enum`` repeatedly in pydantic JSON serialisation hot-paths) while still providing a canonical list of allowed values.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RunStatus {
    #[serde(rename = "queued")]
    Queued,
    #[serde(rename = "running")]
    Running,
    #[serde(rename = "success")]
    Success,
    #[serde(rename = "failed")]
    Failed,

}

impl std::fmt::Display for RunStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Queued => write!(f, "queued"),
            Self::Running => write!(f, "running"),
            Self::Success => write!(f, "success"),
            Self::Failed => write!(f, "failed"),
        }
    }
}

impl Default for RunStatus {
    fn default() -> RunStatus {
        Self::Queued
    }
}

