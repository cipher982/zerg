/*
 * Zerg Agent Platform API
 *
 * Complete REST API specification for the Zerg Agent Platform. This schema is the single source of truth for frontend-backend contracts.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UserOut {
    #[serde(rename = "id")]
    pub id: i32,
    #[serde(rename = "email")]
    pub email: String,
    #[serde(rename = "is_active")]
    pub is_active: bool,
    #[serde(rename = "created_at")]
    pub created_at: String,
    #[serde(rename = "display_name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<Option<String>>,
    #[serde(rename = "avatar_url", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub avatar_url: Option<Option<String>>,
    #[serde(rename = "prefs", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub prefs: Option<Option<serde_json::Value>>,
    #[serde(rename = "last_login", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub last_login: Option<Option<String>>,
    #[serde(rename = "role", skip_serializing_if = "Option::is_none")]
    pub role: Option<String>,
    #[serde(rename = "gmail_connected", skip_serializing_if = "Option::is_none")]
    pub gmail_connected: Option<bool>,
}

impl UserOut {
    pub fn new(id: i32, email: String, is_active: bool, created_at: String) -> UserOut {
        UserOut {
            id,
            email,
            is_active,
            created_at,
            display_name: None,
            avatar_url: None,
            prefs: None,
            last_login: None,
            role: None,
            gmail_connected: None,
        }
    }
}

