/*
 * Zerg Agent Platform API
 *
 * Complete REST API specification for the Zerg Agent Platform. This schema is the single source of truth for frontend-backend contracts.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Workflow {
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "description", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub description: Option<Option<String>>,
    #[serde(rename = "id")]
    pub id: i32,
    #[serde(rename = "owner_id")]
    pub owner_id: i32,
    #[serde(rename = "is_active")]
    pub is_active: bool,
    #[serde(rename = "created_at")]
    pub created_at: String,
    #[serde(rename = "updated_at")]
    pub updated_at: String,
    #[serde(rename = "canvas")]
    pub canvas: models::WorkflowDataOutput,
}

impl Workflow {
    pub fn new(name: String, id: i32, owner_id: i32, is_active: bool, created_at: String, updated_at: String, canvas: models::WorkflowDataOutput) -> Workflow {
        Workflow {
            name,
            description: None,
            id,
            owner_id,
            is_active,
            created_at,
            updated_at,
            canvas,
        }
    }
}

