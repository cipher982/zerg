/*
 * Zerg Agent Platform API
 *
 * Complete REST API specification for the Zerg Agent Platform. This schema is the single source of truth for frontend-backend contracts.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Agent {
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "system_instructions")]
    pub system_instructions: String,
    #[serde(rename = "task_instructions")]
    pub task_instructions: String,
    #[serde(rename = "model")]
    pub model: String,
    #[serde(rename = "schedule", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub schedule: Option<Option<String>>,
    #[serde(rename = "config", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub config: Option<Option<serde_json::Value>>,
    #[serde(rename = "last_error", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub last_error: Option<Option<String>>,
    #[serde(rename = "allowed_tools", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub allowed_tools: Option<Option<Vec<String>>>,
    #[serde(rename = "id")]
    pub id: i32,
    #[serde(rename = "owner_id")]
    pub owner_id: i32,
    #[serde(rename = "owner", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub owner: Option<Option<Box<models::UserOut>>>,
    #[serde(rename = "status")]
    pub status: String,
    #[serde(rename = "created_at")]
    pub created_at: String,
    #[serde(rename = "updated_at")]
    pub updated_at: String,
    #[serde(rename = "messages", skip_serializing_if = "Option::is_none")]
    pub messages: Option<Vec<models::AgentMessage>>,
    #[serde(rename = "next_run_at", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub next_run_at: Option<Option<String>>,
    #[serde(rename = "last_run_at", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub last_run_at: Option<Option<String>>,
}

impl Agent {
    pub fn new(name: String, system_instructions: String, task_instructions: String, model: String, id: i32, owner_id: i32, status: String, created_at: String, updated_at: String) -> Agent {
        Agent {
            name,
            system_instructions,
            task_instructions,
            model,
            schedule: None,
            config: None,
            last_error: None,
            allowed_tools: None,
            id,
            owner_id,
            owner: None,
            status,
            created_at,
            updated_at,
            messages: None,
            next_run_at: None,
            last_run_at: None,
        }
    }
}

