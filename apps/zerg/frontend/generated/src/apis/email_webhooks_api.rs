/*
 * Zerg Agent Platform API
 *
 * Complete REST API specification for the Zerg Agent Platform. This schema is the single source of truth for frontend-backend contracts.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};

/// struct for passing parameters to the method [`gmail_webhook_api_email_webhook_google_post`]
#[derive(Clone, Debug)]
pub struct GmailWebhookApiEmailWebhookGooglePostParams {
    pub x_goog_channel_token: String,
    pub session_factory: Option<models::serde_json::Value>,
    pub x_goog_resource_id: Option<String>,
    pub x_goog_message_number: Option<String>,
    pub authorization: Option<String>,
    pub body: Option<serde_json::Value>
}


/// struct for typed errors of method [`gmail_webhook_api_email_webhook_google_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GmailWebhookApiEmailWebhookGooglePostError {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}


/// Handle Gmail *watch* callbacks.  The implementation is an **MVP**: every callback simply triggers all *gmail* email-type triggers.  Later versions will match the *resourceId* to a specific user and run the Gmail *history* API to fetch only the new messages.
pub async fn gmail_webhook_api_email_webhook_google_post(configuration: &configuration::Configuration, params: GmailWebhookApiEmailWebhookGooglePostParams) -> Result<serde_json::Value, Error<GmailWebhookApiEmailWebhookGooglePostError>> {

    let uri_str = format!("{}/api/email/webhook/google", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref param_value) = params.session_factory {
        req_builder = req_builder.query(&[("session_factory", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("X-Goog-Channel-Token", params.x_goog_channel_token.to_string());
    if let Some(param_value) = params.x_goog_resource_id {
        req_builder = req_builder.header("X-Goog-Resource-Id", param_value.to_string());
    }
    if let Some(param_value) = params.x_goog_message_number {
        req_builder = req_builder.header("X-Goog-Message-Number", param_value.to_string());
    }
    if let Some(param_value) = params.authorization {
        req_builder = req_builder.header("Authorization", param_value.to_string());
    }
    req_builder = req_builder.json(&params.body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `serde_json::Value`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `serde_json::Value`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GmailWebhookApiEmailWebhookGooglePostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

