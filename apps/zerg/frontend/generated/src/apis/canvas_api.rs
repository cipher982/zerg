/*
 * Zerg Agent Platform API
 *
 * Complete REST API specification for the Zerg Agent Platform. This schema is the single source of truth for frontend-backend contracts.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};

/// struct for passing parameters to the method [`get_layout_api_graph_layout_get`]
#[derive(Clone, Debug)]
pub struct GetLayoutApiGraphLayoutGetParams {
    pub workflow_id: Option<i32>,
    pub session_factory: Option<models::serde_json::Value>
}

/// struct for passing parameters to the method [`patch_layout_api_graph_layout_patch`]
#[derive(Clone, Debug)]
pub struct PatchLayoutApiGraphLayoutPatchParams {
    pub layout_update: models::LayoutUpdate,
    pub workflow_id: Option<i32>,
    pub session_factory: Option<models::serde_json::Value>
}


/// struct for typed errors of method [`get_layout_api_graph_layout_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetLayoutApiGraphLayoutGetError {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`patch_layout_api_graph_layout_patch`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PatchLayoutApiGraphLayoutPatchError {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}


/// Return the stored layout for the authenticated user (if any).
pub async fn get_layout_api_graph_layout_get(configuration: &configuration::Configuration, params: GetLayoutApiGraphLayoutGetParams) -> Result<serde_json::Value, Error<GetLayoutApiGraphLayoutGetError>> {

    let uri_str = format!("{}/api/graph/layout", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.workflow_id {
        req_builder = req_builder.query(&[("workflow_id", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.session_factory {
        req_builder = req_builder.query(&[("session_factory", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `serde_json::Value`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `serde_json::Value`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetLayoutApiGraphLayoutGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Upsert the authenticated user's canvas layout.
pub async fn patch_layout_api_graph_layout_patch(configuration: &configuration::Configuration, params: PatchLayoutApiGraphLayoutPatchParams) -> Result<(), Error<PatchLayoutApiGraphLayoutPatchError>> {

    let uri_str = format!("{}/api/graph/layout", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::PATCH, &uri_str);

    if let Some(ref param_value) = params.workflow_id {
        req_builder = req_builder.query(&[("workflow_id", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.session_factory {
        req_builder = req_builder.query(&[("session_factory", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&params.layout_update);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<PatchLayoutApiGraphLayoutPatchError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

