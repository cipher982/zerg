/*
 * Zerg Agent Platform API
 *
 * Complete REST API specification for the Zerg Agent Platform. This schema is the single source of truth for frontend-backend contracts.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};

/// struct for passing parameters to the method [`add_mcp_server_api_agents_agent_id_mcp_servers_post`]
#[derive(Clone, Debug)]
pub struct AddMcpServerApiAgentsAgentIdMcpServersPostParams {
    pub agent_id: i32,
    pub mcp_server_add_request: models::McpServerAddRequest,
    pub session_factory: Option<String>
}

/// struct for passing parameters to the method [`get_available_tools_api_agents_agent_id_mcp_servers_available_tools_get`]
#[derive(Clone, Debug)]
pub struct GetAvailableToolsApiAgentsAgentIdMcpServersAvailableToolsGetParams {
    pub agent_id: i32,
    pub session_factory: Option<String>
}

/// struct for passing parameters to the method [`list_mcp_servers_api_agents_agent_id_mcp_servers_get`]
#[derive(Clone, Debug)]
pub struct ListMcpServersApiAgentsAgentIdMcpServersGetParams {
    pub agent_id: i32,
    pub session_factory: Option<String>
}

/// struct for passing parameters to the method [`remove_mcp_server_api_agents_agent_id_mcp_servers_server_name_delete`]
#[derive(Clone, Debug)]
pub struct RemoveMcpServerApiAgentsAgentIdMcpServersServerNameDeleteParams {
    pub agent_id: i32,
    pub server_name: String,
    pub session_factory: Option<String>
}

/// struct for passing parameters to the method [`test_mcp_connection_api_agents_agent_id_mcp_servers_test_post`]
#[derive(Clone, Debug)]
pub struct TestMcpConnectionApiAgentsAgentIdMcpServersTestPostParams {
    pub agent_id: i32,
    pub mcp_server_add_request: models::McpServerAddRequest,
    pub session_factory: Option<String>
}


/// struct for typed errors of method [`add_mcp_server_api_agents_agent_id_mcp_servers_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AddMcpServerApiAgentsAgentIdMcpServersPostError {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_available_tools_api_agents_agent_id_mcp_servers_available_tools_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAvailableToolsApiAgentsAgentIdMcpServersAvailableToolsGetError {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_mcp_servers_api_agents_agent_id_mcp_servers_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListMcpServersApiAgentsAgentIdMcpServersGetError {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`remove_mcp_server_api_agents_agent_id_mcp_servers_server_name_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RemoveMcpServerApiAgentsAgentIdMcpServersServerNameDeleteError {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`test_mcp_connection_api_agents_agent_id_mcp_servers_test_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TestMcpConnectionApiAgentsAgentIdMcpServersTestPostError {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}


/// Add an MCP server to an agent.
pub async fn add_mcp_server_api_agents_agent_id_mcp_servers_post(configuration: &configuration::Configuration, params: AddMcpServerApiAgentsAgentIdMcpServersPostParams) -> Result<models::Agent, Error<AddMcpServerApiAgentsAgentIdMcpServersPostError>> {

    let uri_str = format!("{}/api/agents/{agent_id}/mcp-servers/", configuration.base_path, agent_id=params.agent_id);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref param_value) = params.session_factory {
        req_builder = req_builder.query(&[("session_factory", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&params.mcp_server_add_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::Agent`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::Agent`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<AddMcpServerApiAgentsAgentIdMcpServersPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get all available tools for an agent (built-in + MCP).
pub async fn get_available_tools_api_agents_agent_id_mcp_servers_available_tools_get(configuration: &configuration::Configuration, params: GetAvailableToolsApiAgentsAgentIdMcpServersAvailableToolsGetParams) -> Result<serde_json::Value, Error<GetAvailableToolsApiAgentsAgentIdMcpServersAvailableToolsGetError>> {

    let uri_str = format!("{}/api/agents/{agent_id}/mcp-servers/available-tools", configuration.base_path, agent_id=params.agent_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.session_factory {
        req_builder = req_builder.query(&[("session_factory", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `serde_json::Value`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `serde_json::Value`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetAvailableToolsApiAgentsAgentIdMcpServersAvailableToolsGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// List all MCP servers configured for an agent.
pub async fn list_mcp_servers_api_agents_agent_id_mcp_servers_get(configuration: &configuration::Configuration, params: ListMcpServersApiAgentsAgentIdMcpServersGetParams) -> Result<Vec<models::McpServerResponse>, Error<ListMcpServersApiAgentsAgentIdMcpServersGetError>> {

    let uri_str = format!("{}/api/agents/{agent_id}/mcp-servers/", configuration.base_path, agent_id=params.agent_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.session_factory {
        req_builder = req_builder.query(&[("session_factory", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::McpServerResponse&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::McpServerResponse&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ListMcpServersApiAgentsAgentIdMcpServersGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Remove an MCP server from an agent.
pub async fn remove_mcp_server_api_agents_agent_id_mcp_servers_server_name_delete(configuration: &configuration::Configuration, params: RemoveMcpServerApiAgentsAgentIdMcpServersServerNameDeleteParams) -> Result<(), Error<RemoveMcpServerApiAgentsAgentIdMcpServersServerNameDeleteError>> {

    let uri_str = format!("{}/api/agents/{agent_id}/mcp-servers/{server_name}", configuration.base_path, agent_id=params.agent_id, server_name=crate::apis::urlencode(params.server_name));
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref param_value) = params.session_factory {
        req_builder = req_builder.query(&[("session_factory", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<RemoveMcpServerApiAgentsAgentIdMcpServersServerNameDeleteError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Test connection to an MCP server without saving it.
pub async fn test_mcp_connection_api_agents_agent_id_mcp_servers_test_post(configuration: &configuration::Configuration, params: TestMcpConnectionApiAgentsAgentIdMcpServersTestPostParams) -> Result<models::McpTestConnectionResponse, Error<TestMcpConnectionApiAgentsAgentIdMcpServersTestPostError>> {

    let uri_str = format!("{}/api/agents/{agent_id}/mcp-servers/test", configuration.base_path, agent_id=params.agent_id);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref param_value) = params.session_factory {
        req_builder = req_builder.query(&[("session_factory", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&params.mcp_server_add_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::McpTestConnectionResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::McpTestConnectionResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<TestMcpConnectionApiAgentsAgentIdMcpServersTestPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

