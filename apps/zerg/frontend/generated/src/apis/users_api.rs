/*
 * Zerg Agent Platform API
 *
 * Complete REST API specification for the Zerg Agent Platform. This schema is the single source of truth for frontend-backend contracts.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};

/// struct for passing parameters to the method [`read_current_user_api_users_me_get`]
#[derive(Clone, Debug)]
pub struct ReadCurrentUserApiUsersMeGetParams {
    pub session_factory: Option<models::serde_json::Value>
}

/// struct for passing parameters to the method [`update_current_user_api_users_me_put`]
#[derive(Clone, Debug)]
pub struct UpdateCurrentUserApiUsersMePutParams {
    pub user_update: models::UserUpdate,
    pub session_factory: Option<models::serde_json::Value>
}

/// struct for passing parameters to the method [`upload_current_user_avatar_api_users_me_avatar_post`]
#[derive(Clone, Debug)]
pub struct UploadCurrentUserAvatarApiUsersMeAvatarPostParams {
    /// Avatar image file (PNG/JPEG/WebP â‰¤2 MB)
    pub file: std::path::PathBuf,
    pub session_factory: Option<models::serde_json::Value>
}


/// struct for typed errors of method [`read_current_user_api_users_me_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ReadCurrentUserApiUsersMeGetError {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_current_user_api_users_me_put`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateCurrentUserApiUsersMePutError {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`upload_current_user_avatar_api_users_me_avatar_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UploadCurrentUserAvatarApiUsersMeAvatarPostError {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}


/// Return the authenticated user's profile.
pub async fn read_current_user_api_users_me_get(configuration: &configuration::Configuration, params: ReadCurrentUserApiUsersMeGetParams) -> Result<models::UserOut, Error<ReadCurrentUserApiUsersMeGetError>> {

    let uri_str = format!("{}/api/users/me", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.session_factory {
        req_builder = req_builder.query(&[("session_factory", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::UserOut`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::UserOut`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ReadCurrentUserApiUsersMeGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Patch the authenticated user's profile (display name, avatar, prefs).
pub async fn update_current_user_api_users_me_put(configuration: &configuration::Configuration, params: UpdateCurrentUserApiUsersMePutParams) -> Result<models::UserOut, Error<UpdateCurrentUserApiUsersMePutError>> {

    let uri_str = format!("{}/api/users/me", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref param_value) = params.session_factory {
        req_builder = req_builder.query(&[("session_factory", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&params.user_update);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::UserOut`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::UserOut`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<UpdateCurrentUserApiUsersMePutError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Handle *multipart/form-data* avatar upload for the authenticated user.
pub async fn upload_current_user_avatar_api_users_me_avatar_post(configuration: &configuration::Configuration, params: UploadCurrentUserAvatarApiUsersMeAvatarPostParams) -> Result<models::UserOut, Error<UploadCurrentUserAvatarApiUsersMeAvatarPostError>> {

    let uri_str = format!("{}/api/users/me/avatar", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref param_value) = params.session_factory {
        req_builder = req_builder.query(&[("session_factory", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    let mut multipart_form = reqwest::multipart::Form::new();
    // TODO: support file upload for 'file' parameter
    req_builder = req_builder.multipart(multipart_form);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::UserOut`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::UserOut`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<UploadCurrentUserAvatarApiUsersMeAvatarPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

