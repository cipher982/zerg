/*
 * Zerg Agent Platform API
 *
 * Complete REST API specification for the Zerg Agent Platform. This schema is the single source of truth for frontend-backend contracts.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};

/// struct for passing parameters to the method [`create_template_api_templates_post`]
#[derive(Clone, Debug)]
pub struct CreateTemplateApiTemplatesPostParams {
    pub workflow_template_create: models::WorkflowTemplateCreate,
    pub session_factory: Option<models::serde_json::Value>
}

/// struct for passing parameters to the method [`deploy_template_api_templates_deploy_post`]
#[derive(Clone, Debug)]
pub struct DeployTemplateApiTemplatesDeployPostParams {
    pub template_deploy_request: models::TemplateDeployRequest,
    pub session_factory: Option<models::serde_json::Value>
}

/// struct for passing parameters to the method [`get_template_api_templates_template_id_get`]
#[derive(Clone, Debug)]
pub struct GetTemplateApiTemplatesTemplateIdGetParams {
    pub template_id: i32,
    pub session_factory: Option<String>
}

/// struct for passing parameters to the method [`list_categories_api_templates_categories_get`]
#[derive(Clone, Debug)]
pub struct ListCategoriesApiTemplatesCategoriesGetParams {
    pub session_factory: Option<models::serde_json::Value>
}

/// struct for passing parameters to the method [`list_templates_api_templates_get`]
#[derive(Clone, Debug)]
pub struct ListTemplatesApiTemplatesGetParams {
    pub category: Option<String>,
    pub skip: Option<i32>,
    pub limit: Option<i32>,
    pub my_templates: Option<bool>,
    pub session_factory: Option<models::serde_json::Value>
}


/// struct for typed errors of method [`create_template_api_templates_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateTemplateApiTemplatesPostError {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`deploy_template_api_templates_deploy_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeployTemplateApiTemplatesDeployPostError {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_template_api_templates_template_id_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetTemplateApiTemplatesTemplateIdGetError {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_categories_api_templates_categories_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListCategoriesApiTemplatesCategoriesGetError {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_templates_api_templates_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListTemplatesApiTemplatesGetError {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}


/// Create new workflow template.
pub async fn create_template_api_templates_post(configuration: &configuration::Configuration, params: CreateTemplateApiTemplatesPostParams) -> Result<models::WorkflowTemplate, Error<CreateTemplateApiTemplatesPostError>> {

    let uri_str = format!("{}/api/templates/", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref param_value) = params.session_factory {
        req_builder = req_builder.query(&[("session_factory", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&params.workflow_template_create);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::WorkflowTemplate`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::WorkflowTemplate`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateTemplateApiTemplatesPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Deploy a template as a new workflow.
pub async fn deploy_template_api_templates_deploy_post(configuration: &configuration::Configuration, params: DeployTemplateApiTemplatesDeployPostParams) -> Result<models::Workflow, Error<DeployTemplateApiTemplatesDeployPostError>> {

    let uri_str = format!("{}/api/templates/deploy", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref param_value) = params.session_factory {
        req_builder = req_builder.query(&[("session_factory", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&params.template_deploy_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::Workflow`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::Workflow`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<DeployTemplateApiTemplatesDeployPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get a specific template by ID.
pub async fn get_template_api_templates_template_id_get(configuration: &configuration::Configuration, params: GetTemplateApiTemplatesTemplateIdGetParams) -> Result<models::WorkflowTemplate, Error<GetTemplateApiTemplatesTemplateIdGetError>> {

    let uri_str = format!("{}/api/templates/{template_id}", configuration.base_path, template_id=params.template_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.session_factory {
        req_builder = req_builder.query(&[("session_factory", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::WorkflowTemplate`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::WorkflowTemplate`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetTemplateApiTemplatesTemplateIdGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get all available template categories.
pub async fn list_categories_api_templates_categories_get(configuration: &configuration::Configuration, params: ListCategoriesApiTemplatesCategoriesGetParams) -> Result<Vec<String>, Error<ListCategoriesApiTemplatesCategoriesGetError>> {

    let uri_str = format!("{}/api/templates/categories", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.session_factory {
        req_builder = req_builder.query(&[("session_factory", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;String&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;String&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ListCategoriesApiTemplatesCategoriesGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// List workflow templates. By default shows public templates. Set my_templates=true to see your own templates (public and private).
pub async fn list_templates_api_templates_get(configuration: &configuration::Configuration, params: ListTemplatesApiTemplatesGetParams) -> Result<Vec<models::WorkflowTemplate>, Error<ListTemplatesApiTemplatesGetError>> {

    let uri_str = format!("{}/api/templates/", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.category {
        req_builder = req_builder.query(&[("category", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.skip {
        req_builder = req_builder.query(&[("skip", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.my_templates {
        req_builder = req_builder.query(&[("my_templates", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.session_factory {
        req_builder = req_builder.query(&[("session_factory", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::WorkflowTemplate&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::WorkflowTemplate&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ListTemplatesApiTemplatesGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

