/*
 * Zerg Agent Platform API
 *
 * Complete REST API specification for the Zerg Agent Platform. This schema is the single source of truth for frontend-backend contracts.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};

/// struct for passing parameters to the method [`create_agent_api_agents_post`]
#[derive(Clone, Debug)]
pub struct CreateAgentApiAgentsPostParams {
    pub agent_create: models::AgentCreate,
    pub session_factory: Option<models::serde_json::Value>
}

/// struct for passing parameters to the method [`create_agent_api_agents_post_0`]
#[derive(Clone, Debug)]
pub struct CreateAgentApiAgentsPost0Params {
    pub agent_create: models::AgentCreate,
    pub session_factory: Option<models::serde_json::Value>
}

/// struct for passing parameters to the method [`create_agent_message_api_agents_agent_id_messages_post`]
#[derive(Clone, Debug)]
pub struct CreateAgentMessageApiAgentsAgentIdMessagesPostParams {
    pub agent_id: i32,
    pub message_create: models::MessageCreate,
    pub session_factory: Option<String>
}

/// struct for passing parameters to the method [`delete_agent_api_agents_agent_id_delete`]
#[derive(Clone, Debug)]
pub struct DeleteAgentApiAgentsAgentIdDeleteParams {
    pub agent_id: i32,
    pub session_factory: Option<String>
}

/// struct for passing parameters to the method [`read_agent_api_agents_agent_id_get`]
#[derive(Clone, Debug)]
pub struct ReadAgentApiAgentsAgentIdGetParams {
    pub agent_id: i32,
    pub session_factory: Option<String>
}

/// struct for passing parameters to the method [`read_agent_details_api_agents_agent_id_details_get`]
#[derive(Clone, Debug)]
pub struct ReadAgentDetailsApiAgentsAgentIdDetailsGetParams {
    pub agent_id: i32,
    pub include: Option<String>,
    pub session_factory: Option<String>
}

/// struct for passing parameters to the method [`read_agent_messages_api_agents_agent_id_messages_get`]
#[derive(Clone, Debug)]
pub struct ReadAgentMessagesApiAgentsAgentIdMessagesGetParams {
    pub agent_id: i32,
    pub skip: Option<i32>,
    pub limit: Option<i32>,
    pub session_factory: Option<String>
}

/// struct for passing parameters to the method [`read_agents_api_agents_get`]
#[derive(Clone, Debug)]
pub struct ReadAgentsApiAgentsGetParams {
    pub scope: Option<String>,
    pub skip: Option<i32>,
    pub limit: Option<i32>,
    pub session_factory: Option<models::serde_json::Value>
}

/// struct for passing parameters to the method [`read_agents_api_agents_get_0`]
#[derive(Clone, Debug)]
pub struct ReadAgentsApiAgentsGet0Params {
    pub scope: Option<String>,
    pub skip: Option<i32>,
    pub limit: Option<i32>,
    pub session_factory: Option<models::serde_json::Value>
}

/// struct for passing parameters to the method [`run_agent_task_api_agents_agent_id_task_post`]
#[derive(Clone, Debug)]
pub struct RunAgentTaskApiAgentsAgentIdTaskPostParams {
    pub agent_id: i32,
    pub session_factory: Option<String>
}

/// struct for passing parameters to the method [`update_agent_api_agents_agent_id_put`]
#[derive(Clone, Debug)]
pub struct UpdateAgentApiAgentsAgentIdPutParams {
    pub agent_id: i32,
    pub agent_update: models::AgentUpdate,
    pub session_factory: Option<String>
}


/// struct for typed errors of method [`create_agent_api_agents_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateAgentApiAgentsPostError {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_agent_api_agents_post_0`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateAgentApiAgentsPost0Error {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_agent_message_api_agents_agent_id_messages_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateAgentMessageApiAgentsAgentIdMessagesPostError {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_agent_api_agents_agent_id_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteAgentApiAgentsAgentIdDeleteError {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`read_agent_api_agents_agent_id_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ReadAgentApiAgentsAgentIdGetError {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`read_agent_details_api_agents_agent_id_details_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ReadAgentDetailsApiAgentsAgentIdDetailsGetError {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`read_agent_messages_api_agents_agent_id_messages_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ReadAgentMessagesApiAgentsAgentIdMessagesGetError {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`read_agents_api_agents_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ReadAgentsApiAgentsGetError {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`read_agents_api_agents_get_0`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ReadAgentsApiAgentsGet0Error {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`run_agent_task_api_agents_agent_id_task_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RunAgentTaskApiAgentsAgentIdTaskPostError {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_agent_api_agents_agent_id_put`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateAgentApiAgentsAgentIdPutError {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}


pub async fn create_agent_api_agents_post(configuration: &configuration::Configuration, params: CreateAgentApiAgentsPostParams) -> Result<models::Agent, Error<CreateAgentApiAgentsPostError>> {

    let uri_str = format!("{}/api/agents", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref param_value) = params.session_factory {
        req_builder = req_builder.query(&[("session_factory", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&params.agent_create);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::Agent`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::Agent`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateAgentApiAgentsPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn create_agent_api_agents_post_0(configuration: &configuration::Configuration, params: CreateAgentApiAgentsPost0Params) -> Result<models::Agent, Error<CreateAgentApiAgentsPost0Error>> {

    let uri_str = format!("{}/api/agents/", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref param_value) = params.session_factory {
        req_builder = req_builder.query(&[("session_factory", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&params.agent_create);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::Agent`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::Agent`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateAgentApiAgentsPost0Error> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn create_agent_message_api_agents_agent_id_messages_post(configuration: &configuration::Configuration, params: CreateAgentMessageApiAgentsAgentIdMessagesPostParams) -> Result<models::MessageResponse, Error<CreateAgentMessageApiAgentsAgentIdMessagesPostError>> {

    let uri_str = format!("{}/api/agents/{agent_id}/messages", configuration.base_path, agent_id=params.agent_id);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref param_value) = params.session_factory {
        req_builder = req_builder.query(&[("session_factory", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&params.message_create);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::MessageResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::MessageResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateAgentMessageApiAgentsAgentIdMessagesPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn delete_agent_api_agents_agent_id_delete(configuration: &configuration::Configuration, params: DeleteAgentApiAgentsAgentIdDeleteParams) -> Result<(), Error<DeleteAgentApiAgentsAgentIdDeleteError>> {

    let uri_str = format!("{}/api/agents/{agent_id}", configuration.base_path, agent_id=params.agent_id);
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref param_value) = params.session_factory {
        req_builder = req_builder.query(&[("session_factory", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteAgentApiAgentsAgentIdDeleteError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn read_agent_api_agents_agent_id_get(configuration: &configuration::Configuration, params: ReadAgentApiAgentsAgentIdGetParams) -> Result<models::Agent, Error<ReadAgentApiAgentsAgentIdGetError>> {

    let uri_str = format!("{}/api/agents/{agent_id}", configuration.base_path, agent_id=params.agent_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.session_factory {
        req_builder = req_builder.query(&[("session_factory", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::Agent`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::Agent`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ReadAgentApiAgentsAgentIdGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn read_agent_details_api_agents_agent_id_details_get(configuration: &configuration::Configuration, params: ReadAgentDetailsApiAgentsAgentIdDetailsGetParams) -> Result<models::AgentDetails, Error<ReadAgentDetailsApiAgentsAgentIdDetailsGetError>> {

    let uri_str = format!("{}/api/agents/{agent_id}/details", configuration.base_path, agent_id=params.agent_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.include {
        req_builder = req_builder.query(&[("include", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.session_factory {
        req_builder = req_builder.query(&[("session_factory", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::AgentDetails`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::AgentDetails`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ReadAgentDetailsApiAgentsAgentIdDetailsGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn read_agent_messages_api_agents_agent_id_messages_get(configuration: &configuration::Configuration, params: ReadAgentMessagesApiAgentsAgentIdMessagesGetParams) -> Result<Vec<models::MessageResponse>, Error<ReadAgentMessagesApiAgentsAgentIdMessagesGetError>> {

    let uri_str = format!("{}/api/agents/{agent_id}/messages", configuration.base_path, agent_id=params.agent_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.skip {
        req_builder = req_builder.query(&[("skip", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.session_factory {
        req_builder = req_builder.query(&[("session_factory", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::MessageResponse&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::MessageResponse&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ReadAgentMessagesApiAgentsAgentIdMessagesGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn read_agents_api_agents_get(configuration: &configuration::Configuration, params: ReadAgentsApiAgentsGetParams) -> Result<Vec<models::Agent>, Error<ReadAgentsApiAgentsGetError>> {

    let uri_str = format!("{}/api/agents", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.scope {
        req_builder = req_builder.query(&[("scope", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.skip {
        req_builder = req_builder.query(&[("skip", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.session_factory {
        req_builder = req_builder.query(&[("session_factory", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::Agent&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::Agent&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ReadAgentsApiAgentsGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn read_agents_api_agents_get_0(configuration: &configuration::Configuration, params: ReadAgentsApiAgentsGet0Params) -> Result<Vec<models::Agent>, Error<ReadAgentsApiAgentsGet0Error>> {

    let uri_str = format!("{}/api/agents/", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.scope {
        req_builder = req_builder.query(&[("scope", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.skip {
        req_builder = req_builder.query(&[("skip", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.session_factory {
        req_builder = req_builder.query(&[("session_factory", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::Agent&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::Agent&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ReadAgentsApiAgentsGet0Error> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn run_agent_task_api_agents_agent_id_task_post(configuration: &configuration::Configuration, params: RunAgentTaskApiAgentsAgentIdTaskPostParams) -> Result<serde_json::Value, Error<RunAgentTaskApiAgentsAgentIdTaskPostError>> {

    let uri_str = format!("{}/api/agents/{agent_id}/task", configuration.base_path, agent_id=params.agent_id);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref param_value) = params.session_factory {
        req_builder = req_builder.query(&[("session_factory", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `serde_json::Value`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `serde_json::Value`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<RunAgentTaskApiAgentsAgentIdTaskPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn update_agent_api_agents_agent_id_put(configuration: &configuration::Configuration, params: UpdateAgentApiAgentsAgentIdPutParams) -> Result<models::Agent, Error<UpdateAgentApiAgentsAgentIdPutError>> {

    let uri_str = format!("{}/api/agents/{agent_id}", configuration.base_path, agent_id=params.agent_id);
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref param_value) = params.session_factory {
        req_builder = req_builder.query(&[("session_factory", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&params.agent_update);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::Agent`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::Agent`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<UpdateAgentApiAgentsAgentIdPutError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

