/*
 * Zerg Agent Platform API
 *
 * Complete REST API specification for the Zerg Agent Platform. This schema is the single source of truth for frontend-backend contracts.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};

/// struct for passing parameters to the method [`create_thread_api_threads_post`]
#[derive(Clone, Debug)]
pub struct CreateThreadApiThreadsPostParams {
    pub thread_create: models::ThreadCreate,
    pub session_factory: Option<models::serde_json::Value>
}

/// struct for passing parameters to the method [`create_thread_api_threads_post_0`]
#[derive(Clone, Debug)]
pub struct CreateThreadApiThreadsPost0Params {
    pub thread_create: models::ThreadCreate,
    pub session_factory: Option<models::serde_json::Value>
}

/// struct for passing parameters to the method [`create_thread_message_api_threads_thread_id_messages_post`]
#[derive(Clone, Debug)]
pub struct CreateThreadMessageApiThreadsThreadIdMessagesPostParams {
    pub thread_id: i32,
    pub thread_message_create: models::ThreadMessageCreate,
    pub session_factory: Option<String>
}

/// struct for passing parameters to the method [`delete_thread_api_threads_thread_id_delete`]
#[derive(Clone, Debug)]
pub struct DeleteThreadApiThreadsThreadIdDeleteParams {
    pub thread_id: i32,
    pub session_factory: Option<String>
}

/// struct for passing parameters to the method [`read_thread_api_threads_thread_id_get`]
#[derive(Clone, Debug)]
pub struct ReadThreadApiThreadsThreadIdGetParams {
    pub thread_id: i32,
    pub session_factory: Option<String>
}

/// struct for passing parameters to the method [`read_thread_messages_api_threads_thread_id_messages_get`]
#[derive(Clone, Debug)]
pub struct ReadThreadMessagesApiThreadsThreadIdMessagesGetParams {
    pub thread_id: i32,
    pub skip: Option<i32>,
    pub limit: Option<i32>,
    pub session_factory: Option<String>
}

/// struct for passing parameters to the method [`read_threads_api_threads_get`]
#[derive(Clone, Debug)]
pub struct ReadThreadsApiThreadsGetParams {
    pub agent_id: Option<i32>,
    pub skip: Option<i32>,
    pub limit: Option<i32>,
    pub session_factory: Option<models::serde_json::Value>
}

/// struct for passing parameters to the method [`read_threads_api_threads_get_0`]
#[derive(Clone, Debug)]
pub struct ReadThreadsApiThreadsGet0Params {
    pub agent_id: Option<i32>,
    pub skip: Option<i32>,
    pub limit: Option<i32>,
    pub session_factory: Option<models::serde_json::Value>
}

/// struct for passing parameters to the method [`run_thread_api_threads_thread_id_run_post`]
#[derive(Clone, Debug)]
pub struct RunThreadApiThreadsThreadIdRunPostParams {
    pub thread_id: i32,
    pub session_factory: Option<String>
}

/// struct for passing parameters to the method [`update_thread_api_threads_thread_id_put`]
#[derive(Clone, Debug)]
pub struct UpdateThreadApiThreadsThreadIdPutParams {
    pub thread_id: i32,
    pub thread_update: models::ThreadUpdate,
    pub session_factory: Option<String>
}


/// struct for typed errors of method [`create_thread_api_threads_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateThreadApiThreadsPostError {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_thread_api_threads_post_0`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateThreadApiThreadsPost0Error {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_thread_message_api_threads_thread_id_messages_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateThreadMessageApiThreadsThreadIdMessagesPostError {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_thread_api_threads_thread_id_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteThreadApiThreadsThreadIdDeleteError {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`read_thread_api_threads_thread_id_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ReadThreadApiThreadsThreadIdGetError {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`read_thread_messages_api_threads_thread_id_messages_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ReadThreadMessagesApiThreadsThreadIdMessagesGetError {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`read_threads_api_threads_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ReadThreadsApiThreadsGetError {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`read_threads_api_threads_get_0`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ReadThreadsApiThreadsGet0Error {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`run_thread_api_threads_thread_id_run_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RunThreadApiThreadsThreadIdRunPostError {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_thread_api_threads_thread_id_put`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateThreadApiThreadsThreadIdPutError {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}


/// Create a new thread
pub async fn create_thread_api_threads_post(configuration: &configuration::Configuration, params: CreateThreadApiThreadsPostParams) -> Result<models::Thread, Error<CreateThreadApiThreadsPostError>> {

    let uri_str = format!("{}/api/threads", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref param_value) = params.session_factory {
        req_builder = req_builder.query(&[("session_factory", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&params.thread_create);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::Thread`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::Thread`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateThreadApiThreadsPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Create a new thread
pub async fn create_thread_api_threads_post_0(configuration: &configuration::Configuration, params: CreateThreadApiThreadsPost0Params) -> Result<models::Thread, Error<CreateThreadApiThreadsPost0Error>> {

    let uri_str = format!("{}/api/threads/", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref param_value) = params.session_factory {
        req_builder = req_builder.query(&[("session_factory", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&params.thread_create);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::Thread`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::Thread`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateThreadApiThreadsPost0Error> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Create a new message in a thread
pub async fn create_thread_message_api_threads_thread_id_messages_post(configuration: &configuration::Configuration, params: CreateThreadMessageApiThreadsThreadIdMessagesPostParams) -> Result<models::ThreadMessageResponse, Error<CreateThreadMessageApiThreadsThreadIdMessagesPostError>> {

    let uri_str = format!("{}/api/threads/{thread_id}/messages", configuration.base_path, thread_id=params.thread_id);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref param_value) = params.session_factory {
        req_builder = req_builder.query(&[("session_factory", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&params.thread_message_create);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ThreadMessageResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ThreadMessageResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateThreadMessageApiThreadsThreadIdMessagesPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Delete a thread
pub async fn delete_thread_api_threads_thread_id_delete(configuration: &configuration::Configuration, params: DeleteThreadApiThreadsThreadIdDeleteParams) -> Result<(), Error<DeleteThreadApiThreadsThreadIdDeleteError>> {

    let uri_str = format!("{}/api/threads/{thread_id}", configuration.base_path, thread_id=params.thread_id);
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref param_value) = params.session_factory {
        req_builder = req_builder.query(&[("session_factory", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteThreadApiThreadsThreadIdDeleteError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get a specific thread by ID
pub async fn read_thread_api_threads_thread_id_get(configuration: &configuration::Configuration, params: ReadThreadApiThreadsThreadIdGetParams) -> Result<models::Thread, Error<ReadThreadApiThreadsThreadIdGetError>> {

    let uri_str = format!("{}/api/threads/{thread_id}", configuration.base_path, thread_id=params.thread_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.session_factory {
        req_builder = req_builder.query(&[("session_factory", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::Thread`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::Thread`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ReadThreadApiThreadsThreadIdGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get all messages for a thread
pub async fn read_thread_messages_api_threads_thread_id_messages_get(configuration: &configuration::Configuration, params: ReadThreadMessagesApiThreadsThreadIdMessagesGetParams) -> Result<Vec<models::ThreadMessageResponse>, Error<ReadThreadMessagesApiThreadsThreadIdMessagesGetError>> {

    let uri_str = format!("{}/api/threads/{thread_id}/messages", configuration.base_path, thread_id=params.thread_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.skip {
        req_builder = req_builder.query(&[("skip", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.session_factory {
        req_builder = req_builder.query(&[("session_factory", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::ThreadMessageResponse&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::ThreadMessageResponse&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ReadThreadMessagesApiThreadsThreadIdMessagesGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get all threads, optionally filtered by agent_id
pub async fn read_threads_api_threads_get(configuration: &configuration::Configuration, params: ReadThreadsApiThreadsGetParams) -> Result<Vec<models::Thread>, Error<ReadThreadsApiThreadsGetError>> {

    let uri_str = format!("{}/api/threads", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.agent_id {
        req_builder = req_builder.query(&[("agent_id", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.skip {
        req_builder = req_builder.query(&[("skip", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.session_factory {
        req_builder = req_builder.query(&[("session_factory", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::Thread&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::Thread&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ReadThreadsApiThreadsGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get all threads, optionally filtered by agent_id
pub async fn read_threads_api_threads_get_0(configuration: &configuration::Configuration, params: ReadThreadsApiThreadsGet0Params) -> Result<Vec<models::Thread>, Error<ReadThreadsApiThreadsGet0Error>> {

    let uri_str = format!("{}/api/threads/", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.agent_id {
        req_builder = req_builder.query(&[("agent_id", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.skip {
        req_builder = req_builder.query(&[("skip", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.session_factory {
        req_builder = req_builder.query(&[("session_factory", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::Thread&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::Thread&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ReadThreadsApiThreadsGet0Error> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Process any unprocessed messages in the thread and stream back the result.
pub async fn run_thread_api_threads_thread_id_run_post(configuration: &configuration::Configuration, params: RunThreadApiThreadsThreadIdRunPostParams) -> Result<serde_json::Value, Error<RunThreadApiThreadsThreadIdRunPostError>> {

    let uri_str = format!("{}/api/threads/{thread_id}/run", configuration.base_path, thread_id=params.thread_id);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref param_value) = params.session_factory {
        req_builder = req_builder.query(&[("session_factory", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `serde_json::Value`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `serde_json::Value`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<RunThreadApiThreadsThreadIdRunPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Update a thread
pub async fn update_thread_api_threads_thread_id_put(configuration: &configuration::Configuration, params: UpdateThreadApiThreadsThreadIdPutParams) -> Result<models::Thread, Error<UpdateThreadApiThreadsThreadIdPutError>> {

    let uri_str = format!("{}/api/threads/{thread_id}", configuration.base_path, thread_id=params.thread_id);
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref param_value) = params.session_factory {
        req_builder = req_builder.query(&[("session_factory", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&params.thread_update);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::Thread`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::Thread`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<UpdateThreadApiThreadsThreadIdPutError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

