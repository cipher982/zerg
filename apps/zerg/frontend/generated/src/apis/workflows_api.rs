/*
 * Zerg Agent Platform API
 *
 * Complete REST API specification for the Zerg Agent Platform. This schema is the single source of truth for frontend-backend contracts.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};

/// struct for passing parameters to the method [`create_workflow_api_workflows_post`]
#[derive(Clone, Debug)]
pub struct CreateWorkflowApiWorkflowsPostParams {
    pub workflow_create: models::WorkflowCreate,
    pub session_factory: Option<models::serde_json::Value>
}

/// struct for passing parameters to the method [`delete_workflow_api_workflows_workflow_id_delete`]
#[derive(Clone, Debug)]
pub struct DeleteWorkflowApiWorkflowsWorkflowIdDeleteParams {
    pub workflow_id: i32,
    pub session_factory: Option<String>
}

/// struct for passing parameters to the method [`get_current_workflow_api_workflows_current_get`]
#[derive(Clone, Debug)]
pub struct GetCurrentWorkflowApiWorkflowsCurrentGetParams {
    pub session_factory: Option<models::serde_json::Value>
}

/// struct for passing parameters to the method [`get_workflow_layout_api_workflows_workflow_id_layout_get`]
#[derive(Clone, Debug)]
pub struct GetWorkflowLayoutApiWorkflowsWorkflowIdLayoutGetParams {
    pub workflow_id: i32,
    pub session_factory: Option<String>
}

/// struct for passing parameters to the method [`put_workflow_layout_api_workflows_workflow_id_layout_put`]
#[derive(Clone, Debug)]
pub struct PutWorkflowLayoutApiWorkflowsWorkflowIdLayoutPutParams {
    pub workflow_id: i32,
    pub layout_update: models::LayoutUpdate,
    pub session_factory: Option<String>
}

/// struct for passing parameters to the method [`read_workflows_api_workflows_get`]
#[derive(Clone, Debug)]
pub struct ReadWorkflowsApiWorkflowsGetParams {
    pub skip: Option<i32>,
    pub limit: Option<i32>,
    pub session_factory: Option<models::serde_json::Value>
}

/// struct for passing parameters to the method [`rename_workflow_api_workflows_workflow_id_patch`]
#[derive(Clone, Debug)]
pub struct RenameWorkflowApiWorkflowsWorkflowIdPatchParams {
    pub workflow_id: i32,
    pub workflow_update: models::WorkflowUpdate,
    pub session_factory: Option<String>
}

/// struct for passing parameters to the method [`update_current_workflow_canvas_api_workflows_current_canvas_patch`]
#[derive(Clone, Debug)]
pub struct UpdateCurrentWorkflowCanvasApiWorkflowsCurrentCanvasPatchParams {
    pub canvas_update: models::CanvasUpdate,
    pub session_factory: Option<models::serde_json::Value>
}

/// struct for passing parameters to the method [`validate_workflow_api_workflows_validate_post`]
#[derive(Clone, Debug)]
pub struct ValidateWorkflowApiWorkflowsValidatePostParams {
    pub canvas_update: models::CanvasUpdate,
    pub session_factory: Option<models::serde_json::Value>
}


/// struct for typed errors of method [`create_workflow_api_workflows_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateWorkflowApiWorkflowsPostError {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_workflow_api_workflows_workflow_id_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteWorkflowApiWorkflowsWorkflowIdDeleteError {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_current_workflow_api_workflows_current_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCurrentWorkflowApiWorkflowsCurrentGetError {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_workflow_layout_api_workflows_workflow_id_layout_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetWorkflowLayoutApiWorkflowsWorkflowIdLayoutGetError {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`put_workflow_layout_api_workflows_workflow_id_layout_put`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PutWorkflowLayoutApiWorkflowsWorkflowIdLayoutPutError {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`read_workflows_api_workflows_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ReadWorkflowsApiWorkflowsGetError {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`rename_workflow_api_workflows_workflow_id_patch`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RenameWorkflowApiWorkflowsWorkflowIdPatchError {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_current_workflow_canvas_api_workflows_current_canvas_patch`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateCurrentWorkflowCanvasApiWorkflowsCurrentCanvasPatchError {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`validate_workflow_api_workflows_validate_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ValidateWorkflowApiWorkflowsValidatePostError {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}


/// Create new workflow. Rate limited to 100 workflows per minute per user.
pub async fn create_workflow_api_workflows_post(configuration: &configuration::Configuration, params: CreateWorkflowApiWorkflowsPostParams) -> Result<models::Workflow, Error<CreateWorkflowApiWorkflowsPostError>> {

    let uri_str = format!("{}/api/workflows/", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref param_value) = params.session_factory {
        req_builder = req_builder.query(&[("session_factory", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&params.workflow_create);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::Workflow`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::Workflow`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateWorkflowApiWorkflowsPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn delete_workflow_api_workflows_workflow_id_delete(configuration: &configuration::Configuration, params: DeleteWorkflowApiWorkflowsWorkflowIdDeleteParams) -> Result<(), Error<DeleteWorkflowApiWorkflowsWorkflowIdDeleteError>> {

    let uri_str = format!("{}/api/workflows/{workflow_id}", configuration.base_path, workflow_id=params.workflow_id);
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref param_value) = params.session_factory {
        req_builder = req_builder.query(&[("session_factory", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteWorkflowApiWorkflowsWorkflowIdDeleteError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get the user's current working workflow. Creates a default workflow if none exists.
pub async fn get_current_workflow_api_workflows_current_get(configuration: &configuration::Configuration, params: GetCurrentWorkflowApiWorkflowsCurrentGetParams) -> Result<models::Workflow, Error<GetCurrentWorkflowApiWorkflowsCurrentGetError>> {

    let uri_str = format!("{}/api/workflows/current", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.session_factory {
        req_builder = req_builder.query(&[("session_factory", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::Workflow`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::Workflow`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetCurrentWorkflowApiWorkflowsCurrentGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Return the stored canvas layout for the workflow or **204** when empty.
pub async fn get_workflow_layout_api_workflows_workflow_id_layout_get(configuration: &configuration::Configuration, params: GetWorkflowLayoutApiWorkflowsWorkflowIdLayoutGetParams) -> Result<serde_json::Value, Error<GetWorkflowLayoutApiWorkflowsWorkflowIdLayoutGetError>> {

    let uri_str = format!("{}/api/workflows/{workflow_id}/layout", configuration.base_path, workflow_id=params.workflow_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.session_factory {
        req_builder = req_builder.query(&[("session_factory", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `serde_json::Value`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `serde_json::Value`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetWorkflowLayoutApiWorkflowsWorkflowIdLayoutGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Persist the canvas layout for **workflow_id** owned by *current_user*.  The endpoint completely replaces the stored layout – callers should send the full `nodes` + `viewport` payload (same schema as `/api/graph/layout`).
pub async fn put_workflow_layout_api_workflows_workflow_id_layout_put(configuration: &configuration::Configuration, params: PutWorkflowLayoutApiWorkflowsWorkflowIdLayoutPutParams) -> Result<(), Error<PutWorkflowLayoutApiWorkflowsWorkflowIdLayoutPutError>> {

    let uri_str = format!("{}/api/workflows/{workflow_id}/layout", configuration.base_path, workflow_id=params.workflow_id);
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref param_value) = params.session_factory {
        req_builder = req_builder.query(&[("session_factory", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&params.layout_update);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<PutWorkflowLayoutApiWorkflowsWorkflowIdLayoutPutError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Return all workflows owned by current user.
pub async fn read_workflows_api_workflows_get(configuration: &configuration::Configuration, params: ReadWorkflowsApiWorkflowsGetParams) -> Result<Vec<models::Workflow>, Error<ReadWorkflowsApiWorkflowsGetError>> {

    let uri_str = format!("{}/api/workflows/", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.skip {
        req_builder = req_builder.query(&[("skip", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.session_factory {
        req_builder = req_builder.query(&[("session_factory", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::Workflow&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::Workflow&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ReadWorkflowsApiWorkflowsGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn rename_workflow_api_workflows_workflow_id_patch(configuration: &configuration::Configuration, params: RenameWorkflowApiWorkflowsWorkflowIdPatchParams) -> Result<models::Workflow, Error<RenameWorkflowApiWorkflowsWorkflowIdPatchError>> {

    let uri_str = format!("{}/api/workflows/{workflow_id}", configuration.base_path, workflow_id=params.workflow_id);
    let mut req_builder = configuration.client.request(reqwest::Method::PATCH, &uri_str);

    if let Some(ref param_value) = params.session_factory {
        req_builder = req_builder.query(&[("session_factory", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&params.workflow_update);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::Workflow`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::Workflow`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<RenameWorkflowApiWorkflowsWorkflowIdPatchError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Update the canvas for the user's current workflow. Creates a default workflow if none exists.
pub async fn update_current_workflow_canvas_api_workflows_current_canvas_patch(configuration: &configuration::Configuration, params: UpdateCurrentWorkflowCanvasApiWorkflowsCurrentCanvasPatchParams) -> Result<models::Workflow, Error<UpdateCurrentWorkflowCanvasApiWorkflowsCurrentCanvasPatchError>> {

    let uri_str = format!("{}/api/workflows/current/canvas", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::PATCH, &uri_str);

    if let Some(ref param_value) = params.session_factory {
        req_builder = req_builder.query(&[("session_factory", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&params.canvas_update);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::Workflow`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::Workflow`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<UpdateCurrentWorkflowCanvasApiWorkflowsCurrentCanvasPatchError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Validate workflow canvas data without saving.
pub async fn validate_workflow_api_workflows_validate_post(configuration: &configuration::Configuration, params: ValidateWorkflowApiWorkflowsValidatePostParams) -> Result<models::ValidationResponse, Error<ValidateWorkflowApiWorkflowsValidatePostError>> {

    let uri_str = format!("{}/api/workflows/validate", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref param_value) = params.session_factory {
        req_builder = req_builder.query(&[("session_factory", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&params.canvas_update);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ValidationResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ValidationResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ValidateWorkflowApiWorkflowsValidatePostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

