/*
 * Zerg Agent Platform API
 *
 * Complete REST API specification for the Zerg Agent Platform. This schema is the single source of truth for frontend-backend contracts.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};

/// struct for passing parameters to the method [`connect_gmail_api_auth_google_gmail_post`]
#[derive(Clone, Debug)]
pub struct ConnectGmailApiAuthGoogleGmailPostParams {
    pub request_body: std::collections::HashMap<String, String>,
    pub session_factory: Option<models::serde_json::Value>
}

/// struct for passing parameters to the method [`google_sign_in_api_auth_google_post`]
#[derive(Clone, Debug)]
pub struct GoogleSignInApiAuthGooglePostParams {
    pub request_body: std::collections::HashMap<String, String>,
    pub session_factory: Option<models::serde_json::Value>
}


/// struct for typed errors of method [`connect_gmail_api_auth_google_gmail_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ConnectGmailApiAuthGoogleGmailPostError {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`google_sign_in_api_auth_google_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GoogleSignInApiAuthGooglePostError {
    Status422(models::HttpValidationError),
    UnknownValue(serde_json::Value),
}


/// Store *offline* Gmail permissions for the **current** user.  Expected body: ``{ \"auth_code\": \"<code from OAuth consent window>\" }``.  The frontend must request the following when launching the consent screen::      scope=https://www.googleapis.com/auth/gmail.readonly     access_type=offline     prompt=consent  The *refresh token* returned by Google is stored on the user row.  The endpoint returns a simple JSON confirmation so the client knows the account is connected.
pub async fn connect_gmail_api_auth_google_gmail_post(configuration: &configuration::Configuration, params: ConnectGmailApiAuthGoogleGmailPostParams) -> Result<std::collections::HashMap<String, String>, Error<ConnectGmailApiAuthGoogleGmailPostError>> {

    let uri_str = format!("{}/api/auth/google/gmail", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref param_value) = params.session_factory {
        req_builder = req_builder.query(&[("session_factory", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&params.request_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `std::collections::HashMap&lt;String, String&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `std::collections::HashMap&lt;String, String&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ConnectGmailApiAuthGoogleGmailPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Exchange a Google ID token for a platform access token.  Expected JSON body: `{ \"id_token\": \"<JWT from Google>\" }`.
pub async fn google_sign_in_api_auth_google_post(configuration: &configuration::Configuration, params: GoogleSignInApiAuthGooglePostParams) -> Result<models::TokenOut, Error<GoogleSignInApiAuthGooglePostError>> {

    let uri_str = format!("{}/api/auth/google", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref param_value) = params.session_factory {
        req_builder = req_builder.query(&[("session_factory", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&params.request_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::TokenOut`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::TokenOut`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GoogleSignInApiAuthGooglePostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

