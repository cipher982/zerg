<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <!-- CSP: disallow inline scripts, unsafe-eval is not required now that
         the Google Identity initialisation uses reflective closures inside
         WASM (see components/auth.rs) -->
    <!--
      Note: Chrome’s WASM engine still treats `WebAssembly.instantiateStreaming`
      as *script execution* that requires either `'unsafe-eval'` **or** the
      narrower `'wasm-unsafe-eval'` keyword in CSP.  We want to avoid enabling
      generic eval, therefore we add `'wasm-unsafe-eval'` to the script-src
      directive.  This keeps CSP tight while allowing streamed WASM modules.
    -->
    <!--
      The CSP below was recently tightened as part of the new OAuth work.  During
      local development however the frontend (served from http://localhost:8002)
      still needs to communicate with the backend API that runs on the **different
      origin** http://localhost:8001.  A `connect-src` that only allows `'self'`
      therefore blocks WebSocket and fetch requests which is exactly the failure
      you are currently seeing in the browser console (CSP refused to connect to
      http://localhost:8001 and ws://localhost:8001).

      We explicitly list those two origins (HTTP + WS) so that they are allowed
      in dev builds while keeping the policy strict for everything else.  This
      change is safe for production because the API is usually served from the
      same origin as the static files in that environment – meaning the
      additional hosts will simply be ignored.
    -->
    <meta http-equiv="Content-Security-Policy" content="default-src 'self'; connect-src 'self' {{BACKEND_URL}} {{BACKEND_WS_URL}} https://accounts.google.com; script-src 'self' 'wasm-unsafe-eval' 'wasm-eval' https://accounts.google.com https://unpkg.com; style-src 'self' 'unsafe-inline' https://accounts.google.com; img-src 'self' data:; frame-src https://accounts.google.com;" />
    <title>AI Agent Platform</title>{{CACHE_BUST}}
    <link rel="stylesheet" href="styles.css">
    <!-- Direct module links to avoid nested @import issues in some browsers -->
    <link rel="stylesheet" href="css/util.css">
    <link rel="stylesheet" href="css/buttons.css">
    <link rel="stylesheet" href="css/forms.css">
    <link rel="stylesheet" href="css/nav.css">
    <!-- Phase-4 progressive enhancement modules -->
    <link rel="stylesheet" href="css/agent_shelf.css">
    <link rel="stylesheet" href="css/canvas.css">
    <link rel="stylesheet" href="css/dashboard.css">
    <link rel="stylesheet" href="css/toast.css">
    <link rel="stylesheet" href="css/status.css">
    <link rel="stylesheet" href="css/ops.css">
    <link rel="stylesheet" href="css/modal.css">
    <link rel="stylesheet" href="css/tool_config_modal.css">
    <link rel="stylesheet" href="css/mcp.css">
    <!-- Shared component styles -->
    <link rel="stylesheet" href="css/components/buttons.css">
    <link rel="stylesheet" href="css/components/modals.css">
    <link rel="stylesheet" href="css/components/disclosure.css">
    <link rel="stylesheet" href="css/components/execution-results.css">
    <!-- Particle / starfield background -->
    <link rel="stylesheet" href="css/particle.css">
    <link rel="stylesheet" href="chat.css">
    <link rel="icon" href="favicon.ico" type="image/x-icon">
    <!-- Google Identity Services (Stage 4 auth) -->
    <script src="https://accounts.google.com/gsi/client" async defer></script>
</head>
<body>
    <!--
      The "single root" (#app-container) approach worked fine when each view
      (dashboard, canvas, chat …) was mounted/un-mounted on every tab switch.
      For the upcoming performance refactor (see CANVAS_RENDER_ROADMAP.md) we
      will instead keep *all* views in the DOM and merely toggle their
      visibility via CSS.  This requires a permanent container for each view
      so the browser can reuse existing nodes instead of tearing them down.

      Phase 1 therefore introduces four empty root elements – one per view –
      that start hidden (except the dashboard which will be shown by the Rust
      code on first mount).  Later phases will move the existing mount logic
      to populate these containers once at startup and then rely on simple
      `display:none` toggling for view switching.
    -->
    <!-- Single application content container -->
    <div id="app-container"></div>

    <!-- Global overlay portal (dropdowns, tooltips, modals that need to escape stacking contexts) -->
    <div id="overlay-root"></div>

    <!-- Particle background layer -->
    <div class="particle-bg" aria-hidden="true"></div>
    
    <!-- Load configuration -->
    <script src="config.js"></script>


    <!-- Ripple interaction (buttons, tabs) -->
    <script src="ripple-init.js" defer></script>

    <!-- Feather icons – lightweight SVG set -->
    <script src="https://unpkg.com/feather-icons"></script>
    <script src="feather-init.js" defer></script>
    
    <!-- Load bootstrap code -->
    <script type="module" src="bootstrap.js"></script>
</body>
</html>
