{
  "version": 1,
  "generated_at": "2025-07-15T10:10:24.356074Z",
  "asyncapi_version": "3.0.0",
  "info": {
    "title": "Zerg WebSocket Protocol",
    "version": "1.0.0",
    "description": "Comprehensive WebSocket protocol for the Zerg Agent Platform.\nConsolidates message types, payload schemas, and routing patterns into\na single source of truth for contract-first development.\n\nFeatures:\n- Topic-based routing with parameterized channels\n- Strongly-typed message payloads\n- Bidirectional operations (send/receive)\n- Alias support for message evolution\n- Handler method mapping for code generation\n"
  },
  "channels": {
    "SystemChannel": {
      "address": "system",
      "description": "Global control messages, errors, and system announcements",
      "parameters": {},
      "messages": [
        "PingMessage",
        "PongMessage",
        "ErrorMessage",
        "SubscribeMessage",
        "UnsubscribeMessage"
      ]
    },
    "ThreadChannel": {
      "address": "thread:{thread_id}",
      "description": "Thread messages, streaming, and lifecycle events",
      "parameters": {
        "thread_id": {
          "description": "Numeric identifier of the thread",
          "examples": [
            "42",
            "123"
          ]
        }
      },
      "messages": [
        "SendMessageRequest",
        "ThreadMessage",
        "ThreadEvent",
        "StreamStart",
        "StreamChunk",
        "StreamEnd",
        "AssistantId"
      ]
    },
    "AgentChannel": {
      "address": "agent:{agent_id}",
      "description": "Agent lifecycle events and run updates",
      "parameters": {
        "agent_id": {
          "description": "Numeric identifier of the agent",
          "examples": [
            "17",
            "42"
          ]
        }
      },
      "messages": [
        "AgentEvent",
        "RunUpdate"
      ]
    },
    "UserChannel": {
      "address": "user:{user_id}",
      "description": "User profile updates and notifications",
      "parameters": {
        "user_id": {
          "description": "Numeric identifier of the user",
          "examples": [
            "1",
            "100"
          ]
        }
      },
      "messages": [
        "UserUpdate"
      ]
    },
    "WorkflowExecutionChannel": {
      "address": "workflow_execution:{execution_id}",
      "description": "Workflow execution state, node updates, and logs",
      "parameters": {
        "execution_id": {
          "description": "Numeric identifier of the execution run",
          "examples": [
            "123",
            "456"
          ]
        }
      },
      "messages": [
        "NodeState",
        "ExecutionFinished",
        "NodeLog"
      ]
    }
  },
  "messages": {
    "ping": {
      "summary": "Heartbeat ping from server",
      "payload_schema": {
        "$ref": "#/components/schemas/PingData"
      },
      "handler_method": "handle_ping",
      "aliases": []
    },
    "pong": {
      "summary": "Heartbeat response from client",
      "payload_schema": {
        "$ref": "#/components/schemas/PongData"
      },
      "handler_method": "handle_pong",
      "aliases": []
    },
    "error": {
      "summary": "Protocol or application error",
      "payload_schema": {
        "$ref": "#/components/schemas/ErrorData"
      },
      "handler_method": "handle_error",
      "aliases": []
    },
    "subscribe": {
      "summary": "Subscribe to topic(s)",
      "payload_schema": {
        "$ref": "#/components/schemas/SubscribeData"
      },
      "handler_method": "handle_subscribe",
      "aliases": []
    },
    "unsubscribe": {
      "summary": "Unsubscribe from topic(s)",
      "payload_schema": {
        "$ref": "#/components/schemas/UnsubscribeData"
      },
      "handler_method": "handle_unsubscribe",
      "aliases": []
    },
    "send_message": {
      "summary": "Client request to send a message to a thread",
      "payload_schema": {
        "$ref": "#/components/schemas/SendMessageData"
      },
      "handler_method": "handle_send_message",
      "aliases": []
    },
    "thread_message": {
      "summary": "New message added to thread",
      "payload_schema": {
        "$ref": "#/components/schemas/ThreadMessageData"
      },
      "handler_method": "handle_thread_message",
      "aliases": [
        "thread_message_created"
      ]
    },
    "thread_event": {
      "summary": "Thread lifecycle event",
      "payload_schema": {
        "$ref": "#/components/schemas/ThreadEventData"
      },
      "handler_method": "handle_thread_event",
      "aliases": [
        "thread_created",
        "thread_updated",
        "thread_deleted"
      ]
    },
    "stream_start": {
      "summary": "Assistant response streaming started",
      "payload_schema": {
        "$ref": "#/components/schemas/StreamStartData"
      },
      "handler_method": "handle_stream_start",
      "aliases": []
    },
    "stream_chunk": {
      "summary": "Chunk of streaming assistant response",
      "payload_schema": {
        "$ref": "#/components/schemas/StreamChunkData"
      },
      "handler_method": "handle_stream_chunk",
      "aliases": []
    },
    "stream_end": {
      "summary": "Assistant response streaming finished",
      "payload_schema": {
        "$ref": "#/components/schemas/StreamEndData"
      },
      "handler_method": "handle_stream_end",
      "aliases": []
    },
    "assistant_id": {
      "summary": "Assistant message ID assignment",
      "payload_schema": {
        "$ref": "#/components/schemas/AssistantIdData"
      },
      "handler_method": "handle_assistant_id",
      "aliases": []
    },
    "agent_event": {
      "summary": "Agent lifecycle or status event",
      "payload_schema": {
        "$ref": "#/components/schemas/AgentEventData"
      },
      "handler_method": "handle_agent_event",
      "aliases": [
        "agent_created",
        "agent_updated",
        "agent_deleted",
        "agent_state"
      ]
    },
    "run_update": {
      "summary": "Agent run status update",
      "payload_schema": {
        "$ref": "#/components/schemas/RunUpdateData"
      },
      "handler_method": "handle_run_update",
      "aliases": []
    },
    "user_update": {
      "summary": "User profile update",
      "payload_schema": {
        "$ref": "#/components/schemas/UserUpdateData"
      },
      "handler_method": "handle_user_update",
      "aliases": []
    },
    "node_state": {
      "summary": "Workflow node state change",
      "payload_schema": {
        "$ref": "#/components/schemas/NodeStateData"
      },
      "handler_method": "handle_node_state",
      "aliases": []
    },
    "execution_finished": {
      "summary": "Workflow execution completed",
      "payload_schema": {
        "$ref": "#/components/schemas/ExecutionFinishedData"
      },
      "handler_method": "handle_execution_finished",
      "aliases": []
    },
    "node_log": {
      "summary": "Workflow node log output",
      "payload_schema": {
        "$ref": "#/components/schemas/NodeLogData"
      },
      "handler_method": "handle_node_log",
      "aliases": []
    }
  },
  "operations": {
    "SystemOperations": {
      "action": "send",
      "channel": {
        "$ref": "#/channels/SystemChannel"
      },
      "messages": []
    },
    "ThreadOperations": {
      "action": "send",
      "channel": {
        "$ref": "#/channels/ThreadChannel"
      },
      "messages": []
    },
    "AgentOperations": {
      "action": "send",
      "channel": {
        "$ref": "#/channels/AgentChannel"
      },
      "messages": []
    },
    "UserOperations": {
      "action": "send",
      "channel": {
        "$ref": "#/channels/UserChannel"
      },
      "messages": []
    },
    "WorkflowOperations": {
      "action": "send",
      "channel": {
        "$ref": "#/channels/WorkflowExecutionChannel"
      },
      "messages": []
    }
  },
  "validation_rules": [
    "Every server-to-client message must have a handler_method",
    "All handler_method names must be unique within a handler group",
    "All message aliases must resolve to the same handler_method as the primary message",
    "Handler topic patterns must match message topic_patterns"
  ],
  "performance_contracts": {
    "message_size_limits": {
      "run_update": "max_1kb",
      "stream_chunk": "max_64kb"
    },
    "throughput_requirements": {
      "dashboard_messages": "100/sec",
      "chat_messages": "1000/sec"
    }
  },
  "security_contracts": {
    "authentication_required": [
      "send_message",
      "subscribe"
    ],
    "authorization_checks": [
      "agent_event",
      "run_update"
    ],
    "data_validation": "strict",
    "sanitization_rules": {
      "user_content": "html_escape",
      "file_paths": "path_traversal_check"
    }
  }
}